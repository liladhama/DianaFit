import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
let knowledgeChunks = [];
let knowledgeLoaded = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadKnowledgeBase() {
  if (knowledgeLoaded) {
    console.log('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
    return;
  }
  
  try {
    const filePath = path.join(__dirname, 'knowledge_base_chunks.jsonl');
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑: ${filePath}`);
    
    if (!fs.existsSync(filePath)) {
      console.error(`‚ùå –§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }
    
    const content = fs.readFileSync(filePath, 'utf-8');
    const lines = content.split('\n').filter(line => line.trim());
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π`);
    
    let successCount = 0;
    let errorCount = 0;
    
    knowledgeChunks = lines.map((line, index) => {
      try {
        const chunk = JSON.parse(line);
        successCount++;
        // –ï—Å–ª–∏ embedding –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä
        if (!chunk.embedding) {
          chunk.embedding = Array(1536).fill(0);
          console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç embedding, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä`);
        }
        return chunk;
      } catch (e) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${index + 1}: ${e.message}`);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π chunk —Å –ø—É—Å—Ç—ã–º embedding —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ä–∞–±–æ—Ç—É
        return { text: "", embedding: Array(1536).fill(0) };
      }
    }).filter(chunk => chunk.text && chunk.text.trim());
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount - errorCount} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ ${lines.length} —Å—Ç—Ä–æ–∫`);
    console.log(`‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: ${errorCount}`);
    console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: ${knowledgeChunks.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`);
    
    knowledgeLoaded = true;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:', error);
  }
}

// –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
function cosineSimilarity(a, b) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
    if (!a || !b || a.length === 0 || b.length === 0) {
      return 0;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
    if (a.length !== b.length) {
      console.warn(`‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –≤–µ–∫—Ç–æ—Ä–æ–≤: ${a.length} vs ${b.length}`);
      return 0;
    }
    
    const dot = a.reduce((sum, ai, i) => sum + ai * b[i], 0);
    const normA = Math.sqrt(a.reduce((sum, ai) => sum + ai * ai, 0));
    const normB = Math.sqrt(b.reduce((sum, bi) => sum + bi * bi, 0));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –Ω–æ—Ä–º—ã
    if (normA === 0 || normB === 0) {
      return 0;
    }
    
    return dot / (normA * normB);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞:', error);
    return 0;
  }
}

// –ü–æ–∏—Å–∫ top-N —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö chunks
function findRelevantChunks(queryEmbedding, topN = 5) {
  if (!knowledgeLoaded) {
    console.log('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å...');
    loadKnowledgeBase();
  }
  
  if (knowledgeChunks.length === 0) {
    console.warn('‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    return [];
  }
  
  try {
    console.log(`–ü–æ–∏—Å–∫ ${topN} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–≤—Å–µ–≥–æ ${knowledgeChunks.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!queryEmbedding || !Array.isArray(queryEmbedding)) {
      console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä');
      queryEmbedding = Array(1536).fill(0);
    }
    
    const results = knowledgeChunks
      .map(chunk => ({
        ...chunk,
        similarity: cosineSimilarity(queryEmbedding, chunk.embedding || Array(1536).fill(0))
      }))
      .sort((a, b) => b.similarity - a.similarity)
      .slice(0, topN);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤`);
    return results;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:', error);
    return [];
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
loadKnowledgeBase();

export { loadKnowledgeBase, findRelevantChunks };
