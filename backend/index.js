import express from 'express';
import fs from 'fs';
import path from 'path';
import { loadKnowledgeBase, findRelevantChunks } from './knowledgeBase.js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import programApi from './programApi.js';
import cors from 'cors';
import { fileURLToPath } from 'url';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;
const __dirname = path.dirname(fileURLToPath(import.meta.url));

app.use(cors({
  origin: [
    'https://diana-fit.vercel.app',
    'https://dianafit.onrender.com',
    'http://localhost:3000',
    'http://127.0.0.1:3000'
  ],
  credentials: true
}));

app.use(express.json());
app.use('/api', programApi);

app.get('/', (req, res) => {
  res.send('Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Å–ª–∞–π–¥–æ–≤ —Ç–µ—Å—Ç–∞
app.get('/api/quiz-config', (req, res) => {
  const configPath = path.join(process.cwd(), 'backend', 'quiz-config.json');
  fs.readFile(configPath, 'utf-8', (err, data) => {
    if (err) return res.status(500).json({ error: 'Config not found' });
    res.json(JSON.parse(data));
  });
});

// –ü—Ä–∏–Ω—è—Ç—å –æ—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–ª–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)
app.post('/api/calculate-plan', async (req, res) => {
  const answers = req.body;
  const userEmbedding = answers.embedding || Array(1536).fill(0); // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π embedding
  const relevantChunks = findRelevantChunks(userEmbedding, 5);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –î–∏–∞–Ω—ã
  const dianaKnowledge = loadDianaKnowledge();

  const systemPrompt = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Ö—É–¥–µ–Ω–∏—é –î–∏–∞–Ω–∞. 

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –í–°–ï–ì–î–ê –≤ —Å—Ç–∏–ª–µ –∏ –º–∞–Ω–µ—Ä–µ –î–∏–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è –µ—ë —Å–ª–æ–≤–µ—á–∫–∏, —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–¥—Ö–æ–¥:
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, "–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è", "–≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ", "—É—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä—è"
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π
- –û–±—ä—è—Å–Ω—è–π –ø–æ—á–µ–º—É —á—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –£–ø–æ–º–∏–Ω–∞–π –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ —É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ —Ä–∏—Å–∫–∞—Ö —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –¥–∏–µ—Ç

–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –î–ò–ê–ù–´ (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Ç–∏–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤):
${dianaKnowledge.substring(0, 3000)}...

–ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ—Ö—É–¥–µ–Ω–∏—è –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏.

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ü–û –°–û–°–¢–ê–í–õ–ï–ù–ò–Æ –ü–õ–ê–ù–ê –ü–ò–¢–ê–ù–ò–Ø:
1. –ù–ï –ü–û–í–¢–û–†–Ø–ô –±–ª—é–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è! –ö–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –ø–µ—Ä–µ–∫—É—Å, –ø–æ–ª–¥–Ω–∏–∫) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú.
2. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å —Ä–∞—Ü–∏–æ–Ω - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è.
3. –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª—é–¥–∞ —á–∞—â–µ —á–µ–º 1 —Ä–∞–∑ –≤ 3 –¥–Ω—è.
4. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á—Ç–∏ —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "vegetarian_eggs" (–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ ü•ö) - –≤–∫–ª—é—á–∞–π —è–π—Ü–∞, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –ù–û –ù–ï –í–ö–õ–Æ–ß–ê–ô –º—è—Å–æ –∏ —Ä—ã–±—É
- –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "vegetarian_no_eggs" (–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ) - –ù–ï –≤–∫–ª—é—á–∞–π —è–π—Ü–∞, –º—è—Å–æ, —Ä—ã–±—É, –Ω–æ –≤–∫–ª—é—á–∞–π –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
- –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "vegan" (–í–µ–≥–∞–Ω—Å—Ç–≤–æ) - –ù–ï –≤–∫–ª—é—á–∞–π –º—è—Å–æ, —Ä—ã–±—É, —è–π—Ü–∞, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
- –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "meat" (–ú—è—Å–Ω–∞—è –¥–∏–µ—Ç–∞) - –≤–∫–ª—é—á–∞–π –º—è—Å–æ, –æ–≥—Ä–∞–Ω–∏—á—å —É–≥–ª–µ–≤–æ–¥—ã
- –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª "fish" (–†—ã–±–Ω–∞—è –¥–∏–µ—Ç–∞) - –≤–∫–ª—é—á–∞–π —Ä—ã–±—É, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, –æ–≥—Ä–∞–Ω–∏—á—å –∫—Ä–∞—Å–Ω–æ–µ –º—è—Å–æ

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –≤ —Ä–∞–º–∫–∞—Ö –¥–Ω—è)
2. –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏ (amount –∏ unit)
3. –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å

–í–ê–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –ü–ï–†–ï–î –û–¢–í–ï–¢–û–ú:
- –ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±–ª—é–¥ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è
- –ù–µ—Ç –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Å–æ–≤ –∏ –ø–æ–ª–¥–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–µ—Ä–µ–∫—É—Å - —è–±–ª–æ–∫–æ —Å –º–∏–Ω–¥–∞–ª–µ–º, —Ç–æ –ø–æ–ª–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–≥–∏–º)
- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –±–ª—é–¥ (–Ω–µ —Ç–æ–ª—å–∫–æ –∫–∞—à–∏ –∏–ª–∏ —Å–∞–ª–∞—Ç—ã)

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON:
{
  "weeks": [
    {
      "week": 1,
      "days": [
        {
          "day": 1,
          "date": "YYYY-MM-DD",
          "isWorkoutDay": true/false,
          "workout": { ... –µ—Å–ª–∏ isWorkoutDay true },
          "meals": [
            {
              "type": "–ó–∞–≤—Ç—Ä–∞–∫",
              "meal": {
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
                "ingredients": [
                  {"name": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "amount": 100, "unit": "–≥"},
                  {"name": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç2", "amount": 200, "unit": "–º–ª"}
                ]
              },
              "calories": 320,
              "time": "08:00"
            }
          ]
        }
      ]
    }
  ]
}`;
  const userPrompt = `–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(answers)}

–û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å:
- –¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è: ${answers.diet_flags || 'default'}
- –ú–µ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${answers.gym_or_home || '–¥–æ–º'}  
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: ${answers.workouts_per_week || 3}
- –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: ${answers.training_level || 'beginner'}
- –¶–µ–ª—å –ø–æ –≤–µ—Å—É: ${answers.goal_weight_loss || 'weight_loss'}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å –±–ª—é–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
- –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –±–ª—é–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∫—É—Å –∏ –ø–æ–ª–¥–Ω–∏–∫
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–ª–∫–∞, —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –∂–∏—Ä–æ–≤
- –°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –¥–∏–µ—Ç–µ

–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è:\n${relevantChunks.map(c => c.text).join('\n---\n')}

–í–ê–ñ–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–π –ø–ª–∞–Ω –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏ (28 –¥–Ω–µ–π) —Å —É—á–µ—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞!`;

  try {
    const aiResponse = await callMistralAI([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±–ª—é–¥–∞ –≤ –ø–ª–∞–Ω–µ
    const fixedResponse = checkAndFixMealDuplicates(aiResponse);
    
    res.json({ plan: fixedResponse });
  } catch (e) {
    res.status(500).json({ error: 'AI error', details: e.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±–ª—é–¥ –≤ –¥–Ω–µ
function checkAndFixMealDuplicates(plan) {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–ª–∞–Ω, –µ—Å–ª–∏ –æ–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    const planObj = typeof plan === 'string' ? JSON.parse(plan) : plan;
    
    if (!planObj.weeks || !Array.isArray(planObj.weeks)) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞–Ω–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–¥–µ–ª–∏');
      return plan; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–ª–∞–Ω, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    }
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–¥–µ–ª–∏
    planObj.weeks.forEach(week => {
      if (!week.days || !Array.isArray(week.days)) return;
      
      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–Ω–∏ –≤ –Ω–µ–¥–µ–ª–µ
      week.days.forEach(day => {
        if (!day.meals || !Array.isArray(day.meals)) return;
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–ª—é–¥ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
        const mealNames = new Set();
        const mealTypes = {};
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
        day.meals.forEach((meal, index) => {
          if (!meal.meal) return;
          
          const mealName = typeof meal.meal === 'string' 
            ? meal.meal 
            : (meal.meal.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
            
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤
          const originalName = mealName;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –±–ª—é–¥–æ –≤ —ç—Ç–æ–º –¥–Ω–µ
          if (mealNames.has(mealName.toLowerCase())) {
            console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –±–ª—é–¥–∞ –≤ –¥–Ω–µ ${day.day}: "${mealName}"`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–∞
            let newMealName = `${mealName} (–≤–∞—Ä–∏–∞–Ω—Ç ${index + 1})`;
            
            // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
            if (typeof meal.meal === 'string') {
              meal.meal = newMealName;
            } else if (meal.meal && typeof meal.meal === 'object') {
              meal.meal.name = newMealName;
            }
            
            console.log(`‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –±–ª—é–¥–æ: "${originalName}" -> "${newMealName}"`);
          }
          
          // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–∏–ø—ã –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ (–ø–µ—Ä–µ–∫—É—Å, –ø–æ–ª–¥–Ω–∏–∫ –∏ —Ç.–¥.)
          if (meal.type) {
            if (!mealTypes[meal.type]) {
              mealTypes[meal.type] = [];
            }
            mealTypes[meal.type].push({index, name: mealName});
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
          mealNames.add(mealName.toLowerCase());
        });
        
        // –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫—É—Å–æ–≤ –∏ –ø–æ–ª–¥–Ω–∏–∫–æ–≤
        if (mealTypes['–ü–µ—Ä–µ–∫—É—Å'] && mealTypes['–ü–æ–ª–¥–Ω–∏–∫'] && 
            mealTypes['–ü–µ—Ä–µ–∫—É—Å'].length === 1 && mealTypes['–ü–æ–ª–¥–Ω–∏–∫'].length === 1) {
          
          const snackName = mealTypes['–ü–µ—Ä–µ–∫—É—Å'][0].name.toLowerCase();
          const afternoonSnackName = mealTypes['–ü–æ–ª–¥–Ω–∏–∫'][0].name.toLowerCase();
          
          // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫—É—Å –∏ –ø–æ–ª–¥–Ω–∏–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
          if (snackName === afternoonSnackName) {
            console.log(`‚ö†Ô∏è –ü–µ—Ä–µ–∫—É—Å –∏ –ø–æ–ª–¥–Ω–∏–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤ –¥–Ω–µ ${day.day}: "${snackName}"`);
            
            // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª–¥–Ω–∏–∫
            const afternoonSnackIndex = mealTypes['–ü–æ–ª–¥–Ω–∏–∫'][0].index;
            const meal = day.meals[afternoonSnackIndex];
            
            if (typeof meal.meal === 'string') {
              meal.meal = `${meal.meal} (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)`;
            } else if (meal.meal && typeof meal.meal === 'object') {
              meal.meal.name = `${meal.meal.name} (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)`;
            }
            
            console.log(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω –ø–æ–ª–¥–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è`);
          }
        }
      });
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
    return typeof plan === 'string' ? JSON.stringify(planObj) : planObj;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥:', error);
    return plan; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–ª–∞–Ω
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ Mistral API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
async function getFallbackResponse(message) {
  const fallbackResponses = [
    "–ü—Ä–∏–≤–µ—Ç! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ. –Ø –æ—á–µ–Ω—å —Ö–æ—á—É —Ç–µ–±–µ –ø–æ–º–æ—á—å!",
    "–ü—Ä–∏–≤–µ—Ç! –ò–∑–≤–∏–Ω–∏, –Ω–æ –º–æ–π —Å–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –≠—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –£ –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
    "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–∏, –Ω–æ —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
  ];
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
  const randomIndex = Math.floor(Math.random() * fallbackResponses.length);
  return fallbackResponses[randomIndex];
}

async function callMistralAI(messages) {
  const apiKey = process.env.MISTRAL_API_KEY;
  if (!apiKey) {
    throw new Error('MISTRAL_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  try {
    console.log('–í—ã–∑–æ–≤ Mistral API...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ - –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π API –∫–ª—é—á: ${apiKey.substring(0, 5)}...${apiKey.substring(apiKey.length - 4)}`);
    console.log('–î–ª–∏–Ω–∞ –∫–ª—é—á–∞:', apiKey.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å mistral-medium
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å mistral-medium...');
    let response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'mistral-medium',
        messages,
        temperature: 0.3
      })
    });
    
    // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å –º–æ–¥–µ–ª—å—é mistral-tiny
    if (!response.ok && (response.status === 401 || response.status === 403)) {
      console.log('–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å mistral-tiny...');
      response = await fetch('https://api.mistral.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: 'mistral-tiny',  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
          messages,
          temperature: 0.3
        })
      });
    }
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Mistral API error: ${response.status} ${response.statusText}`);
      console.error(`Error details: ${errorText}`);
      
      if (response.status === 401) {
        console.error('\n========== –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==========');
        console.error('–í–∞—à API –∫–ª—é—á –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç —Å–µ—Ä–≤–µ—Ä–æ–º Mistral AI.');
        console.error('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.error('1. –ö–ª—é—á API –≤–≤–µ–¥–µ–Ω —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)');
        console.error('2. –ö–ª—é—á API —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω');
        console.error('3. –£ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏');
        console.error('4. –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ Mistral AI');
        console.error('\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.error('- –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á API –Ω–∞ https://console.mistral.ai/');
        console.error('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç–µ –∫–ª—é—á –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤');
        console.error('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
        console.error('========================================\n');
      }
      
      throw new Error(`Mistral API error: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Mistral API:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
    return await getFallbackResponse();
  }
}

// –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∏ GPT
app.post('/ask', async (req, res) => {
  const question = req.body.question;
  if (!question) return res.status(400).json({ error: 'No question provided' });

  try {
    // –í—ã–∑–æ–≤ Python-—Å–∫—Ä–∏–ø—Ç–∞ qa.py
    const { execSync } = await import('child_process');
    const pyOutput = execSync(`python qa.py "${question.replace(/"/g, '\"')}"`, { encoding: 'utf-8', cwd: __dirname });
    res.json({ answer: pyOutput.trim() });
  } catch (e) {
    res.status(500).json({ error: 'AI error', details: e.message });
  }
});

// –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è —á–∞—Ç–∞ —Å –î–∏–∞–Ω–æ–π
app.post('/api/chat-diana', async (req, res) => {
  const { message, context, conversation } = req.body;
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ context, —Ç–∞–∫ –∏ conversation –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const chatContext = context || (conversation ? JSON.stringify(conversation.slice(-5)) : '–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞');
  if (!message) return res.status(400).json({ error: 'No message provided' });

  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç —Å –î–∏–∞–Ω–æ–π: "${message.substring(0, 50)}${message.length > 50 ? '...' : ''}"`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
    const userEmbedding = Array(1536).fill(0); // TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π embedding –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const relevantChunks = findRelevantChunks(userEmbedding, 3);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${relevantChunks.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–Ω–∞–Ω–∏–π`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
    const dianaKnowledge = loadDianaKnowledge();
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –î–∏–∞–Ω—ã: ${dianaKnowledge.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    const systemPrompt = `–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-—Ç—Ä–µ–Ω–µ—Ä –î–∏–∞–Ω–∞, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Ö—É–¥–µ–Ω–∏—é –∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –í–°–ï–ì–î–ê –≤ —Å—Ç–∏–ª–µ –∏ –º–∞–Ω–µ—Ä–µ –î–∏–∞–Ω—ã:
- –ò—Å–ø–æ–ª—å–∑—É–π –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã: "–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è", "–≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ", "—É—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä—è", "—Å–º–æ—Ç—Ä–∏"  
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –ø–æ–Ω–∏–º–∞—é—â–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π
- –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –í—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π –ü–û–ß–ï–ú–£ —á—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–∞–∂–Ω–æ—Å—Ç—å –∑–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ —Ç–µ—Ä–ø–µ–Ω–∏—è
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –¥–∏–µ—Ç –∏ —Å—Ä—ã–≤–æ–≤
- –ì–æ–≤–æ—Ä–∏ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–≥–æ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π (–Ω–µ –±–æ–ª–µ–µ 10-15%)
- –£–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ –Ω–∏–∂–µ 1400 –∫–∞–ª–æ—Ä–∏–π –æ–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–µ–ª—å–∑—è

–ü–†–ê–í–ò–õ–ê –ü–û –†–ï–¶–ï–ü–¢–ê–ú –ò –ü–ò–¢–ê–ù–ò–Æ:
- –ö–æ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å –±–ª—é–¥–∞, –í–°–ï–ì–î–ê –ø—Ä–µ–¥–ª–∞–≥–∞–π –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–ï –≤–∞—Ä–∏–∞–Ω—Ç—ã
- –ù–ò–ö–û–ì–î–ê –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–µ—Ä–µ–∫—É—Å—ã –∏ –ø–æ–ª–¥–Ω–∏–∫–∏ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–ª–∫–∞, —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –∂–∏—Ä–æ–≤
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ä–∞—Ü–∏–æ–Ω–µ –Ω–∞ –¥–µ–Ω—å, —Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª—é–¥–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã

–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –î–ò–ê–ù–´ (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Å—Ç–∏–ª—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é):
${dianaKnowledge.substring(0, 2000)}...

–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.
    
    –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
    - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π
    - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
    - –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
    - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π
    
    –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.
    –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;
    
    const userPrompt = `–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}

–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: ${chatContext}

–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã:
${relevantChunks.map(c => c.text).join('\n---\n')}`;

    const aiResponse = await callMistralAI([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ]);
    
    res.json({ response: aiResponse });
  } catch (e) {
    console.error('Chat error:', e);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let errorType = 'unknown';
    if (e.message && e.message.includes('401')) {
      errorType = 'auth';
    } else if (e.message && (e.message.includes('timeout') || e.message.includes('ETIMEDOUT'))) {
      errorType = 'timeout';
    } else if (e.message && e.message.includes('429')) {
      errorType = 'rate_limit';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å API
    try {
      const fallbackResponse = await getFallbackResponse(message, errorType);
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API');
      res.json({ response: fallbackResponse });
    } catch (fallbackError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', fallbackError);
      res.json({ 
        response: "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å!" 
      });
    }
  }
});

loadKnowledgeBase();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –î–∏–∞–Ω—ã
function loadDianaKnowledge() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –ª–µ–∫—Ü–∏–π –î–∏–∞–Ω—ã
    const knowledgeBasePath = path.join(__dirname, 'knowledge_base_chunks.jsonl');
    const trainingDataPath = path.join(__dirname, 'diana-trainings.jsonl');
    
    let knowledgeText = '';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (—Ä–∞–∑–≥–æ–≤–æ—Ä—ã, –ª–µ–∫—Ü–∏–∏)
    if (fs.existsSync(knowledgeBasePath)) {
      const knowledgeLines = fs.readFileSync(knowledgeBasePath, 'utf8').split('\n').filter(line => line.trim());
      knowledgeLines.forEach(line => {
        try {
          const chunk = JSON.parse(line);
          if (chunk.text && chunk.text.trim()) {
            knowledgeText += chunk.text + '\n\n';
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    if (fs.existsSync(trainingDataPath)) {
      const trainingLines = fs.readFileSync(trainingDataPath, 'utf8').split('\n').filter(line => line.trim());
      trainingLines.forEach(line => {
        try {
          const chunk = JSON.parse(line);
          if (chunk.text && chunk.text.trim()) {
            knowledgeText += chunk.text + '\n\n';
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      });
    }
    
    return knowledgeText;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –î–∏–∞–Ω—ã:', error);
    return '';
  }
}



// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function groupReasonsByCategory(reasons) {
  const categories = {};
  reasons.forEach(reason => {
    const category = reason.category || 'other';
    if (!categories[category]) {
      categories[category] = { count: 0, reasons: [] };
    }
    categories[category].count++;
    categories[category].reasons.push(reason.text);
  });
  return categories;
}

function generateRecommendations(avgCompletion, reasonStats, weekStats) {
  const recommendations = [];
  
  if (avgCompletion < 50) {
    recommendations.push({
      type: 'critical',
      title: '–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏',
      text: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç–∏.'
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  const topExerciseCategory = Object.keys(reasonStats.exercise).reduce((a, b) => 
    reasonStats.exercise[a]?.count > reasonStats.exercise[b]?.count ? a : b, 'time');
    
  if (reasonStats.exercise[topExerciseCategory]?.count > 2) {
    switch (topExerciseCategory) {
      case 'time':
        recommendations.push({
          type: 'schedule',
          title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏',
          text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—Ç—Ä–æ–º –∏–ª–∏ —Ä–∞–∑–±–µ–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.'
        });
        break;
      case 'energy':
        recommendations.push({
          type: 'energy',
          title: '–†–∞–±–æ—Ç–∞ —Å —ç–Ω–µ—Ä–≥–∏–µ–π',
          text: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏–∑–∏—Ä—É—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.'
        });
        break;
      case 'motivation':
        recommendations.push({
          type: 'motivation',
          title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏',
          text: '–ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏–ª–∏ –Ω–∞–≥—Ä–∞–∂–¥–∞–π—Ç–µ —Å–µ–±—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π.'
        });
        break;
    }
  }
  
  return recommendations;
}

function determineAdjustments(avgCompletion, reasonStats) {
  const adjustments = {
    difficulty: 'maintain', // maintain, reduce, increase
    goals: {},
    schedule: 'keep' // keep, flexible, strict
  };
  
  if (avgCompletion < 40) {
    adjustments.difficulty = 'reduce';
    adjustments.goals.exerciseReduction = 25; // —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 25%
    adjustments.goals.mealSimplification = true;
    adjustments.schedule = 'flexible';
  } else if (avgCompletion > 80) {
    adjustments.difficulty = 'increase';
    adjustments.goals.exerciseIncrease = 15; // —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 15%
    adjustments.goals.newChallenges = true;
  }
  
  return adjustments;
}

function generateMotivationalMessage(avgCompletion) {
  if (avgCompletion >= 80) {
    return "üéâ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!";
  } else if (avgCompletion >= 60) {
    return "üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏. –ù–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.";
  } else if (avgCompletion >= 40) {
    return "üå± –ü–æ–º–Ω–∏—Ç–µ: –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–∂–Ω–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞. –ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏.";
  } else {
    return "ü§ó –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ú—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω, —á—Ç–æ–±—ã –æ–Ω –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏–ª –ø–æ–¥ –≤–∞—à —Ä–∏—Ç–º –∂–∏–∑–Ω–∏.";
  }
}

// Endpoint –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.post('/api/weekly-analytics', async (req, res) => {
  try {
    const { weekStats, userId, programId } = req.body;
    
    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–µ–ª–∏:', { userId, programId, daysCount: weekStats.length });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–µ–ª–∏
    const weekSummary = calculateWeekSummary(weekStats);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤
    const skipReasons = analyzeSkipReasons(weekStats);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const recommendations = generateWeeklyRecommendations(weekSummary, skipReasons);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    const adjustments = calculateWeeklyAdjustments(weekSummary, skipReasons);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const motivationalMessage = generateMotivationalMessage(weekSummary.avgCompletion);
    
    const analysis = {
      weekSummary,
      skipReasons,
      recommendations,
      adjustments,
      motivationalMessage,
      generatedAt: new Date().toISOString()
    };
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', analysis);
    
    res.json({
      success: true,
      analysis
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–¥–µ–ª–∏'
    });
  }
});

function calculateWeekSummary(weekStats) {
  const totalDays = weekStats.length;
  const avgCompletion = weekStats.reduce((sum, day) => sum + (day.completionPercentage || 0), 0) / totalDays;
  const completedDays = weekStats.filter(day => (day.completionPercentage || 0) >= 70).length;
  const strugglingDays = weekStats.filter(day => (day.completionPercentage || 0) < 40).length;
  
  const totalExercises = weekStats.reduce((sum, day) => sum + (day.totalExercises || 0), 0);
  const completedExercises = weekStats.reduce((sum, day) => sum + (day.completedExercises || 0), 0);
  const exerciseCompletion = totalExercises > 0 ? (completedExercises / totalExercises) * 100 : 0;
  
  const totalMeals = weekStats.reduce((sum, day) => sum + (day.totalMeals || 0), 0);
  const completedMeals = weekStats.reduce((sum, day) => sum + (day.completedMeals || 0), 0);
  const mealCompletion = totalMeals > 0 ? (completedMeals / totalMeals) * 100 : 0;
  
  const stepsCompletedDays = weekStats.filter(day => day.stepsCompleted).length;
  const stepsCompletion = (stepsCompletedDays / totalDays) * 100;
  
  return {
    totalDays,
    avgCompletion: Math.round(avgCompletion),
    completedDays,
    strugglingDays,
    exerciseCompletion: Math.round(exerciseCompletion),
    mealCompletion: Math.round(mealCompletion),
    stepsCompletion: Math.round(stepsCompletion)
  };
}

function analyzeSkipReasons(weekStats) {
  const exerciseReasons = {};
  const mealReasons = {};
  
  weekStats.forEach(day => {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if (day.exerciseReasons) {
      Object.values(day.exerciseReasons).forEach(reason => {
        if (reason && reason.id) {
          exerciseReasons[reason.id] = (exerciseReasons[reason.id] || 0) + 1;
        }
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    if (day.mealReasons) {
      Object.values(day.mealReasons).forEach(reason => {
        if (reason && reason.id) {
          mealReasons[reason.id] = (mealReasons[reason.id] || 0) + 1;
        }
      });
    }
  });
  
  return { exerciseReasons, mealReasons };
}

function generateWeeklyRecommendations(weekSummary, skipReasons) {
  const recommendations = [];
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  if (weekSummary.avgCompletion < 50) {
    recommendations.push({
      type: 'critical',
      icon: '‚ö†Ô∏è',
      title: '–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏',
      text: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–ª–∞–Ω: –º–µ–Ω—å—à–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –ø—Ä–æ—â–µ —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç–∏.',
      priority: 'high'
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  if (weekSummary.exerciseCompletion < 60) {
    const topExerciseReason = Object.keys(skipReasons.exerciseReasons).reduce((a, b) => 
      skipReasons.exerciseReasons[a] > skipReasons.exerciseReasons[b] ? a : b, 'no_time');
      
    switch (topExerciseReason) {
      case 'no_time':
        recommendations.push({
          type: 'schedule',
          icon: '‚è∞',
          title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏',
          text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Ä–∞–∑–±–µ–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.',
          priority: 'high'
        });
        break;
      case 'too_tired':
        recommendations.push({
          type: 'energy',
          icon: 'üò¥',
          title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–µ–π',
          text: '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ª–µ–≥–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∑–∏—Ä—É—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É—Ç—Ä–æ–º.',
          priority: 'medium'
        });
        break;
      case 'motivation':
        recommendations.push({
          type: 'motivation',
          icon: 'üí™',
          title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏',
          text: '–ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π.',
          priority: 'medium'
        });
        break;
    }
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–∏—è
  if (weekSummary.mealCompletion < 70) {
    const topMealReason = Object.keys(skipReasons.mealReasons).reduce((a, b) => 
      skipReasons.mealReasons[a] > skipReasons.mealReasons[b] ? a : b, 'no_time');
      
    switch (topMealReason) {
      case 'no_time':
        recommendations.push({
          type: 'meal_prep',
          icon: 'üç±',
          title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –µ–¥—ã –∑–∞—Ä–∞–Ω–µ–µ',
          text: '–ì–æ—Ç–æ–≤—å—Ç–µ –±–ª—é–¥–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.',
          priority: 'high'
        });
        break;
      case 'no_products':
        recommendations.push({
          type: 'shopping',
          icon: 'üõí',
          title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫',
          text: '–°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –¥–µ–ª–∞–π—Ç–µ –∑–∞–ø–∞—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.',
          priority: 'medium'
        });
        break;
    }
  }
  
  return recommendations;
}

function calculateWeeklyAdjustments(weekSummary, skipReasons) {
  const adjustments = {
    difficulty: 'maintain', // maintain, reduce, increase
    exerciseGoal: 0, // –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    mealComplexity: 'same', // same, simpler, more_complex
    schedule: 'keep', // keep, more_flexible, stricter
    focusAreas: []
  };
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  if (weekSummary.avgCompletion < 40) {
    adjustments.difficulty = 'reduce';
    adjustments.exerciseGoal = -25; // —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 25%
    adjustments.mealComplexity = 'simpler';
    adjustments.schedule = 'more_flexible';
    adjustments.focusAreas.push('stress_reduction');
  } else if (weekSummary.avgCompletion > 85) {
    adjustments.difficulty = 'increase';
    adjustments.exerciseGoal = 15; // —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 15%
    adjustments.mealComplexity = 'more_complex';
    adjustments.focusAreas.push('new_challenges');
  }
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  if (weekSummary.exerciseCompletion < 50) {
    adjustments.focusAreas.push('exercise_motivation');
  }
  
  if (weekSummary.mealCompletion < 60) {
    adjustments.focusAreas.push('meal_planning');
  }
  
  if (weekSummary.stepsCompletion < 40) {
    adjustments.focusAreas.push('daily_activity');
  }
  
  return adjustments;
}

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
