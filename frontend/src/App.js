import React, { useEffect, useState } from 'react';
import SplashScreen from './components/SplashScreen';
import StoryQuiz from './components/StoryQuiz';
import ProfilePage from './components/ProfilePage';
import DayBlock from './components/DayBlock';
import TodayBlock from './components/TodayBlock';
import TestWeek from './components/TestWeek';
import VideoTest from './components/VideoTest';
import AITestPage from './components/AITestPage';

// –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ production URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò
const API_URL = 'https://dianafit.onrender.com';

function App() {
  const [showSplash, setShowSplash] = useState(true);
  const [programId, setProgramId] = useState(null);
  const [answers, setAnswers] = useState(null);
  const [showProfile, setShowProfile] = useState(false);
  const [showToday, setShowToday] = useState(false);
  const [showTestWeek, setShowTestWeek] = useState(false);
  const [showTodayBlock, setShowTodayBlock] = useState(false);
  const [unlocked, setUnlocked] = useState(false);
  const [showVideoTest, setShowVideoTest] = useState(false);
  const [showAITest, setShowAITest] = useState(false);
  const [userAvatar, setUserAvatar] = useState(null);
  const [isPremium, setIsPremium] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞
  const [isPaymentShown, setIsPaymentShown] = useState(false); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã

  // –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const activatePremium = () => {
    console.log('üéØ App.js: activatePremium –≤—ã–∑–≤–∞–Ω');
    setIsPremium(true);
    setUnlocked(true);
    localStorage.setItem('dianafit_premium', 'true');
    console.log('üî• App.js: –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! isPremium=true, unlocked=true');
    console.log('üî• App.js: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
  };

  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ - –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
  React.useEffect(() => {
    localStorage.removeItem('dianafit_premium');
    console.log('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserAvatar = () => {
    try {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram WebApp
      const tg = window.Telegram?.WebApp;
      if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
        const user = tg.initDataUnsafe.user;
        if (user.photo_url) {
          return user.photo_url;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç Telegram, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ localStorage –∏–ª–∏ API
      return null;
    } catch (error) {
      console.log('Error getting user avatar:', error);
      return null;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp...');
    console.log('window.Telegram:', window.Telegram);
    
    if (window.Telegram?.WebApp) {
      console.log('Telegram WebApp –Ω–∞–π–¥–µ–Ω');
      window.Telegram.WebApp.ready();
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      setTimeout(() => {
        console.log('Telegram WebApp –¥–∞–Ω–Ω—ã–µ:', window.Telegram.WebApp.initDataUnsafe);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const avatar = getUserAvatar();
        setUserAvatar(avatar);
        console.log('User avatar:', avatar);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (window.Telegram.WebApp.initDataUnsafe?.user) {
          const user = window.Telegram.WebApp.initDataUnsafe.user;
          console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', {
            id: user.id,
            first_name: user.first_name,
            username: user.username,
            photo_url: user.photo_url
          });
        } else {
          console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      }, 1000);
    } else {
      console.log('Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –≤ Telegram');
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É
      // setUserAvatar('https://via.placeholder.com/60x60/0088cc/ffffff?text=U');
    }
  }, []);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === 'v' && e.ctrlKey) {
        setShowVideoTest(true);
      }
      if (e.key === 'a' && e.ctrlKey) {
        setShowAITest(true);
      }
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
  let todayDay = null;
  if (answers && programId) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const localProgram = localStorage.getItem(`program_${programId}`);
    if (localProgram) {
      const program = JSON.parse(localProgram);
      console.log('üîç App.js: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:', { 
        programType: typeof program, 
        isArray: Array.isArray(program),
        hasData: !!program,
        keys: Object.keys(program || {}),
        program 
      });
      
      const todayStr = new Date().toISOString().slice(0, 10);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π
      let days = null;
      if (Array.isArray(program)) {
        days = program;
      } else if (program && program.days && Array.isArray(program.days)) {
        days = program.days;
      } else if (program && Array.isArray(program.data)) {
        days = program.data;
      }
      
      if (days && Array.isArray(days)) {
        todayDay = days.find(d => d.date === todayStr);
        console.log('üìÖ App.js: –ü–æ–∏—Å–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:', {
          todayStr,
          foundDay: !!todayDay,
          totalDays: days.length,
          dayWorkout: todayDay?.workout?.title,
          dayLocation: todayDay?.workout?.location
        });
      } else {
        console.error('‚ùå App.js: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π:', program);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
    if (!todayDay) {
      const days = [
        { date: '2024-06-03', title: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', workout: { title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1', exercises: [{ name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', reps: 15 }, { name: '–û—Ç–∂–∏–º–∞–Ω–∏—è', reps: 10 }] }, meals: [{ type: '–ó–∞–≤—Ç—Ä–∞–∫', menu: '–û–≤—Å—è–Ω–∫–∞' }, { type: '–û–±–µ–¥', menu: '–ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º' }], completed: false },
        { date: '2024-06-04', title: '–í—Ç–æ—Ä–Ω–∏–∫', workout: { title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2', exercises: [{ name: '–ü–ª–∞–Ω–∫–∞', reps: 60 }, { name: '–í—ã–ø–∞–¥—ã', reps: 12 }] }, meals: [{ type: '–ó–∞–≤—Ç—Ä–∞–∫', menu: '–Ø–∏—á–Ω–∏—Ü–∞' }, { type: '–û–±–µ–¥', menu: '–†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏' }], completed: false },
        { date: '2024-06-05', title: '–°—Ä–µ–¥–∞', workout: { title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3', exercises: [{ name: '–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è', reps: 20 }, { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', reps: 15 }] }, meals: [{ type: '–ó–∞–≤—Ç—Ä–∞–∫', menu: '–¢–≤–æ—Ä–æ–≥' }, { type: '–û–±–µ–¥', menu: '–ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π' }], completed: false },
        { date: '2024-06-06', title: '–ß–µ—Ç–≤–µ—Ä–≥', workout: { title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 4', exercises: [{ name: '–í—ã–ø–∞–¥—ã', reps: 12 }, { name: '–ü–ª–∞–Ω–∫–∞', reps: 60 }] }, meals: [{ type: '–ó–∞–≤—Ç—Ä–∞–∫', menu: '–û–º–ª–µ—Ç' }, { type: '–û–±–µ–¥', menu: '–ì–æ–≤—è–¥–∏–Ω–∞ —Å –æ–≤–æ—â–∞–º–∏' }], completed: false },
        { date: '2024-06-07', title: '–ü—è—Ç–Ω–∏—Ü–∞', workout: { title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 5', exercises: [{ name: '–û—Ç–∂–∏–º–∞–Ω–∏—è', reps: 10 }, { name: '–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è', reps: 20 }] }, meals: [{ type: '–ó–∞–≤—Ç—Ä–∞–∫', menu: '–ì—Ä–µ—á–∫–∞' }, { type: '–û–±–µ–¥', menu: '–†—ã–±–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º' }], completed: false },
        { date: '2024-06-08', title: '–°—É–±–±–æ—Ç–∞', workout: { title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 6', exercises: [{ name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', reps: 15 }, { name: '–ü–ª–∞–Ω–∫–∞', reps: 60 }] }, meals: [{ type: '–ó–∞–≤—Ç—Ä–∞–∫', menu: '–û–≤—Å—è–Ω–∫–∞' }, { type: '–û–±–µ–¥', menu: '–ö—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏' }], completed: false },
        { date: '2024-06-09', title: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', workout: { title: '–û—Ç–¥—ã—Ö', exercises: [] }, meals: [{ type: '–ó–∞–≤—Ç—Ä–∞–∫', menu: '–§—Ä—É–∫—Ç—ã' }, { type: '–û–±–µ–¥', menu: '–°–∞–ª–∞—Ç' }], completed: false },
      ];
      const todayStr = new Date().toISOString().slice(0, 10);
      todayDay = days.find(d => d.date === todayStr) || days[0];
      console.log('‚ö†Ô∏è App.js: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è');
    }
  }

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–∫–Ω–∞ Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.expand) {
      window.Telegram.WebApp.expand();
    }
    const timer = setTimeout(() => setShowSplash(false), 4000); // 4 —Å–µ–∫—É–Ω–¥—ã
    return () => clearTimeout(timer);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –¥–Ω—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∏–¥–µ–æ
  function getExercisesForDay(location, workoutNumber, level) {
    console.log('üèãÔ∏è‚Äç‚ôÄÔ∏è getExercisesForDay –≤—ã–∑–≤–∞–Ω–∞:', { location, workoutNumber, level });
    
    if (location === 'gym') {
      const dayIndex = (workoutNumber - 1) % 5; // –î–ª—è –∑–∞–ª–∞: —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ 5 —Ç–∏–ø–æ–≤
      
      const gymExercises = [
        // –î–µ–Ω—å 1 - –°–ø–∏–Ω–∞ –∏ –ø–ª–µ—á–∏ (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–ü–æ–¥—ä—ë–º—ã –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω—ã', reps: '3x12', dayId: 'day1_back_shoulders', location: 'gym', videoName: 'dumbbell_lateral_raises' },
          { name: '–¢—è–≥–∞ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ –¥–≤—É–º—è —Ä—É–∫–∞–º–∏', reps: '3x12', dayId: 'day1_back_shoulders', location: 'gym', videoName: 'hammer_machine_row_both_hands' },
          { name: '–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º', reps: '3x10', dayId: 'day1_back_shoulders', location: 'gym', videoName: 'lat_pulldown_wide_grip' },
          { name: '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è', reps: '3x10', dayId: 'day1_back_shoulders', location: 'gym', videoName: 'seated_dumbbell_press' }
        ],
        // –î–µ–Ω—å 2 - –Ø–≥–æ–¥–∏—Ü—ã (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–ñ–∏–º –Ω–æ–≥–∞–º–∏ –ª—ë–∂–∞', reps: '3x15', dayId: 'day2_glutes', location: 'gym', videoName: 'leg_press_lying' },
          { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —É–∑–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π', reps: '3x12', dayId: 'day2_glutes', location: 'gym', videoName: 'narrow_stance_squats' },
          { name: '–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ –≤ –°–º–∏—Ç–µ', reps: '3x12', dayId: 'day2_glutes', location: 'gym', videoName: 'romanian_deadlift_smith_machine' },
          { name: '–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç –≤ –°–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω', reps: '3x15', dayId: 'day2_glutes', location: 'gym', videoName: 'smith_machine_glute_bridge_short_range' }
        ],
        // –î–µ–Ω—å 3 - –Ø–≥–æ–¥–∏—Ü—ã –∏ –±–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞ (5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
        [
          { name: '–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏', reps: '3x12', dayId: 'day3_glutes_hamstrings', location: 'gym', videoName: 'free_weight_glute_bridge' },
          { name: '–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏', reps: '3x12', dayId: 'day3_glutes_hamstrings', location: 'gym', videoName: 'free_weight_romanian_deadlift' },
          { name: '–°–≥–∏–±–∞–Ω–∏—è –Ω–æ–≥ –ª—ë–∂–∞', reps: '3x15', dayId: 'day3_glutes_hamstrings', location: 'gym', videoName: 'lying_leg_curls' },
          { name: '–ñ–∏–º –æ–¥–Ω–æ–π –Ω–æ–≥–æ–π', reps: '3x12', dayId: 'day3_glutes_hamstrings', location: 'gym', videoName: 'single_leg_press' },
          { name: '–û—Ç–≤–µ–¥–µ–Ω–∏–µ –±–µ–¥—Ä–∞ —Å–∏–¥—è', reps: '3x15', dayId: 'day3_glutes_hamstrings', location: 'gym', videoName: 'seated_hip_abduction' }
        ],
        // –î–µ–Ω—å 4 - –°–ø–∏–Ω–∞ –∏ –ø–ª–µ—á–∏ (5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
        [
          { name: '–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º', reps: '3x10', dayId: 'day4_back_shoulders', location: 'gym', videoName: 'lat_pulldown_wide_grip' },
          { name: '–¢—è–≥–∞ —Ç—Ä–æ—Å–∞ —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º', reps: '3x12', dayId: 'day4_back_shoulders', location: 'gym', videoName: 'cable_row_close_grip' },
          { name: '–ü–æ–¥—ä—ë–º—ã –≥–∞–Ω—Ç–µ–ª–µ–π —Å—Ç–æ—è', reps: '3x12', dayId: 'day4_back_shoulders', location: 'gym', videoName: 'standing_dumbbell_lateral_raises' },
          { name: '–û–±—Ä–∞—Ç–Ω–∞—è –±–∞–±–æ—á–∫–∞ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ', reps: '3x15', dayId: 'day4_back_shoulders', location: 'gym', videoName: 'rear_delt_machine_flyes' },
          { name: '–¢—è–≥–∞ –æ–¥–Ω–æ–π —Ä—É–∫–æ–π –≤ —Ö–∞–º–º–µ—Ä–µ', reps: '3x12', dayId: 'day4_back_shoulders', location: 'gym', videoName: 'single_arm_hammer_row' }
        ],
        // –î–µ–Ω—å 5 - –Ø–≥–æ–¥–∏—Ü—ã —Ñ–æ–∫—É—Å (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏', reps: '3x15', dayId: 'day5_glutes_focused', location: 'gym', videoName: 'free_weight_glute_bridge' },
          { name: '–û—Ç–≤–µ–¥–µ–Ω–∏–µ –±–µ–¥—Ä–∞ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ', reps: '3x12', dayId: 'day5_glutes_focused', location: 'gym', videoName: 'hip_abduction_machine' },
          { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —É–∑–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤ –°–º–∏—Ç–µ', reps: '3x12', dayId: 'day5_glutes_focused', location: 'gym', videoName: 'smith_machine_narrow_squats' },
          { name: '–ñ–∏–º –ø–ª–µ—á–∞–º–∏ –≤ –°–º–∏—Ç–µ', reps: '3x10', dayId: 'day5_glutes_focused', location: 'gym', videoName: 'smith_machine_shoulder_press' }
        ]
      ];
      
      const result = gymExercises[dayIndex];
      console.log('üèãÔ∏è‚Äç‚ôÄÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–ª–∞, –¥–µ–Ω—å', workoutNumber, '(–∏–Ω–¥–µ–∫—Å', dayIndex, '):', result);
      return result;
    } else {
      const dayIndex = (workoutNumber - 1) % 5; // –î–ª—è –¥–æ–º–∞: —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ 5 —Ç–∏–ø–æ–≤
      
      const homeExercises = [
        // –î–µ–Ω—å 1 - –ö–∞—Ä–¥–∏–æ –∫—Ä—É–≥–æ–≤–∞—è (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∞–Ω–∫–∞', reps: '3x30 —Å–µ–∫', dayId: 'day1_cardio_circuit', location: 'home', videoName: 'dynamic_plank' },
          { name: '–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –ª—ë–∂–∞', reps: '3x15', dayId: 'day1_cardio_circuit', location: 'home', videoName: 'lying_crunches' },
          { name: '–ü—Ä—ã–≥–∞—é—â–∏–π –¥–∂–µ–∫', reps: '3x20', dayId: 'day1_cardio_circuit', location: 'home', videoName: 'jumping_jacks' },
          { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —à–∏—Ä–æ–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π', reps: '3x15', dayId: 'day1_cardio_circuit', location: 'home', videoName: 'wide_stance_squats' }
        ],
        // –î–µ–Ω—å 2 - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—Ä—É–≥–æ–≤–∞—è (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–í—ã–ø–∞–¥—ã —Ä–µ–≤–µ—Ä–∞–Ω—Å', reps: '3x12', dayId: 'day2_functional_circuit', location: 'home', videoName: 'curtsy_lunges' },
          { name: '–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ —Å —Ä–µ–∑–∏–Ω–∫–æ–π', reps: '3x15', dayId: 'day2_functional_circuit', location: 'home', videoName: 'romanian_deadlift_resistance_band' },
          { name: '–¢—è–≥–∞ —Ä–µ–∑–∏–Ω–∫–∏ –¥–≤—É–º—è —Ä—É–∫–∞–º–∏', reps: '3x12', dayId: 'day2_functional_circuit', location: 'home', videoName: 'resistance_band_row_both_hands' },
          { name: '–¢—è–≥–∞ —Ä–µ–∑–∏–Ω–∫–∏ –æ–¥–Ω–æ–π —Ä—É–∫–æ–π', reps: '3x12', dayId: 'day2_functional_circuit', location: 'home', videoName: 'single_arm_resistance_band_row' }
        ],
        // –î–µ–Ω—å 3 - –¢–∞–±–∞—Ç–∞ (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –æ—Ç–≤–µ–¥–µ–Ω–∏–µ–º –Ω–æ–≥–∏', reps: '4x20 —Å–µ–∫', dayId: 'day3_tabata', location: 'home', videoName: 'squat_with_side_leg_raise' },
          { name: '–°—Ç–∞—Ç–∏—á–Ω—ã–µ –≤—ã–ø–∞–¥—ã', reps: '4x20 —Å–µ–∫', dayId: 'day3_tabata', location: 'home', videoName: 'stationary_lunges' },
          { name: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∫–µ', reps: '4x20 —Å–µ–∫', dayId: 'day3_tabata', location: 'home', videoName: 'dynamic_plank_push_up' },
          { name: '–¢—è–≥–∞ —Ä–µ–∑–∏–Ω–∫–∏ –æ–¥–Ω–æ–π —Ä—É–∫–æ–π', reps: '4x20 —Å–µ–∫', dayId: 'day3_tabata', location: 'home', videoName: 'single_arm_resistance_band_row' }
        ],
        // –î–µ–Ω—å 4 - HIIT (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–°–≤–µ–¥–µ–Ω–∏–µ –ª–æ–ø–∞—Ç–æ–∫', reps: '3x15', dayId: 'day4_hiit', location: 'home', videoName: 'shoulder_blade_squeezes' },
          { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –ø–æ–¥—ä—ë–º–æ–º –Ω–∞ –Ω–æ—Å–∫–∏', reps: '3x12', dayId: 'day4_hiit', location: 'home', videoName: 'squats_with_calf_raise' },
          { name: '–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è', reps: '3x20', dayId: 'day4_hiit', location: 'home', videoName: 'crunches' },
          { name: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∞–Ω–∫–∞', reps: '3x30 —Å–µ–∫', dayId: 'day4_hiit', location: 'home', videoName: 'dynamic_plank' }
        ],
        // –î–µ–Ω—å 5 - –ö–∞—Ä–¥–∏–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (4 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
        [
          { name: '–ó–∞—Ö–ª—ë—Å—Ç—ã', reps: '3x30 —Å–µ–∫', dayId: 'day5_cardio_advanced', location: 'home', videoName: 'butt_kicks' },
          { name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è', reps: '3x15', dayId: 'day5_cardio_advanced', location: 'home', videoName: 'classic_squats' },
          { name: '–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫', reps: '3x12', dayId: 'day5_cardio_advanced', location: 'home', videoName: 'glute_bridge' },
          { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –ø–ª–∏–µ', reps: '3x15', dayId: 'day5_cardio_advanced', location: 'home', videoName: 'plie_squats' }
        ]
      ];
      
      const result = homeExercises[dayIndex];
      console.log('üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–º–∞, –¥–µ–Ω—å', workoutNumber, '(–∏–Ω–¥–µ–∫—Å', dayIndex, '):', result);
      return result;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–≤–∏–∑–∞ (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)
  function createMonthlyProgramDemo(quizAnswers) {
    const workoutsPerWeek = parseInt(quizAnswers.workouts_per_week) || 3;
    const location = quizAnswers.gym_or_home === 'gym' ? 'gym' : 'home'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å 'gym'
    const startDate = new Date(quizAnswers.start_date || new Date());
    const goal = quizAnswers.goal_weight_loss || 'weight_loss';
    const level = quizAnswers.training_level || 'beginner';
    
    console.log('üéØ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { workoutsPerWeek, location, goal, level });
    console.log('üîç Debug quizAnswers.gym_or_home:', quizAnswers.gym_or_home);
    console.log('üîç Debug location result:', location);
    console.log('üîç Debug –í–ï–°–¨ –æ–±—ä–µ–∫—Ç quizAnswers:', quizAnswers);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –Ω–µ–¥–µ–ª–∏
    const getWorkoutPattern = (workoutsCount) => {
      const patterns = {
        2: [1, 4], // –ø–Ω, —á—Ç (–æ—Ç–¥—ã—Ö –º–µ–∂–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏)
        3: [1, 3, 6], // –ø–Ω, —Å—Ä, —Å–± (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –Ω–µ–¥–µ–ª–µ)
        4: [1, 3, 5, 0], // –ø–Ω, —Å—Ä, –ø—Ç, –≤—Å (—á–µ—Ä–µ–∑ –¥–µ–Ω—å + –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        5: [1, 3, 4, 6, 0] // –ø–Ω, —Å—Ä, —á—Ç, —Å–±, –≤—Å (–º–∞–∫—Å–∏–º—É–º 2 –ø–æ–¥—Ä—è–¥)
      };
      return patterns[workoutsCount] || patterns[3];
    };
    
    const workoutPattern = getWorkoutPattern(workoutsPerWeek);
    console.log('üóìÔ∏è –ü–∞—Ç—Ç–µ—Ä–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:', workoutPattern);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ 30 –¥–Ω–µ–π
    const days = [];
    let globalWorkoutCounter = 0; // –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    
    for (let i = 0; i < 30; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);
      
      const dayOfWeek = currentDate.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ª–∏ —ç—Ç–æ –¥–µ–Ω—å
      const isWorkoutDay = workoutPattern.includes(dayOfWeek);
      
      let workoutNumber = 1;
      if (isWorkoutDay) {
        globalWorkoutCounter++;
        // –î–ª—è –¥–æ–º–∞ –∏ –∑–∞–ª–∞: —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ 1-5
        const maxWorkoutTypes = 5;
        workoutNumber = ((globalWorkoutCounter - 1) % maxWorkoutTypes) + 1;
      }
      
      console.log(`üìÖ –î–µ–Ω—å ${i + 1}: ${dayOfWeek === 0 ? '–í—Å' : dayOfWeek === 1 ? '–ü–Ω' : dayOfWeek === 2 ? '–í—Ç' : dayOfWeek === 3 ? '–°—Ä' : dayOfWeek === 4 ? '–ß—Ç' : dayOfWeek === 5 ? '–ü—Ç' : '–°–±'}, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${isWorkoutDay ? `–î–∞ (${workoutNumber})` : '–ù–µ—Ç'}`);
      
      const day = {
        date: currentDate.toISOString().slice(0, 10),
        title: currentDate.toLocaleDateString('ru-RU', { weekday: 'long' }),
        dayNumber: i + 1,
        isWorkoutDay,
        workout: isWorkoutDay ? {
          title: location === 'gym' 
            ? `–î–µ–Ω—å ${workoutNumber} | –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ`
            : `–î–µ–Ω—å ${workoutNumber} | –î–æ–º–∞—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞`,
          exercises: getExercisesForDay(location, workoutNumber, level),
          duration: level === 'beginner' ? 30 : 45,
          difficulty: level,
          location: location
        } : null,
        meals: [
          { type: '–ó–∞–≤—Ç—Ä–∞–∫', meal: getBreakfastByDiet(quizAnswers.diet_flags, i + 1), calories: 320, time: '08:00' },
          { type: '–ü–µ—Ä–µ–∫—É—Å', meal: getSnackByDiet(quizAnswers.diet_flags, i + 1), calories: 80, time: '11:00' },
          { type: '–û–±–µ–¥', meal: getLunchByDiet(quizAnswers.diet_flags, i + 1), calories: 450, time: '14:00' },
          { type: '–ü–æ–ª–¥–Ω–∏–∫', meal: getSnackByDiet(quizAnswers.diet_flags, i + 1, true), calories: 120, time: '17:00' },
          { type: '–£–∂–∏–Ω', meal: getDinnerByDiet(quizAnswers.diet_flags, i + 1), calories: 350, time: '19:00' }
        ],
        dailySteps: 0,
        dailyStepsGoal: level === 'beginner' ? 8000 : 10000,
        completedExercises: isWorkoutDay ? new Array(3).fill(false) : [],
        completedMealsArr: new Array(5).fill(false),
        completedWorkout: false,
        completedMeals: false
      };
      
      days.push(day);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ localStorage
    const programId = `demo-${quizAnswers.name || 'user'}-${Date.now()}`;
    const program = {
      programId,
      userId: quizAnswers.name || 'user',
      profile: quizAnswers,
      days,
      type: 'monthly-demo',
      createdAt: new Date().toISOString()
    };
    
    localStorage.setItem(`program_${programId}`, JSON.stringify(program));
    
    console.log('‚úÖ –î–µ–º–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞:', programId);
    console.log('üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π:', days.length);
    console.log('üèãÔ∏è‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π:', days.filter(d => d.isWorkoutDay).length);
    
    return programId;
  }

  async function handleQuizFinish(quizAnswers) {
    console.log('üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ –ò–ò...');
    
    setAnswers(quizAnswers);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –≤ backend –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ backend –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã...');
      console.log('üìã –î–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞:', quizAnswers);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
        console.log('‚è∞ –ó–∞–ø—Ä–æ—Å –∫ –ò–ò –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (15 —Å–µ–∫—É–Ω–¥)');
      }, 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch(`${API_URL}/api/calculate-plan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(quizAnswers),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç backend, —Å—Ç–∞—Ç—É—Å:', response.status);
      
      if (!response.ok) {
        throw new Error(`Backend error: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò:', result);
      
      // –ü–∞—Ä—Å–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
      const aiGeneratedProgram = parseAIResponse(result.plan, quizAnswers);
      
      if (aiGeneratedProgram) {
        console.log('‚úÖ –ò–ò –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', aiGeneratedProgram);
        setProgramId(aiGeneratedProgram);
        setShowTodayBlock(true);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò');
      }
      
    } catch (error) {
      if (error.name === 'AbortError') {
        console.error('‚è∞ –ó–∞–ø—Ä–æ—Å –∫ –ò–ò –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò:', error);
      }
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –∫–∞–∫ fallback...');
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –ø—Ä–æ–≥—Ä–∞–º–º—É
      const demoProgram = createMonthlyProgramDemo(quizAnswers);
      setProgramId(demoProgram);
      setShowTodayBlock(true);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã
  function parseAIResponse(aiResponse, quizAnswers) {
    try {
      console.log('üß† –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò:', aiResponse);
      
      let parsedResponse;
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
      try {
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ JSON
        if (typeof aiResponse === 'object') {
          parsedResponse = aiResponse;
        } else {
          // –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
          const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            parsedResponse = JSON.parse(jsonMatch[0]);
          } else {
            throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
          }
        }
      } catch (parseError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑');
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
        parsedResponse = createProgramFromText(aiResponse, quizAnswers);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
      const program = convertAIResponseToProgram(parsedResponse, quizAnswers);
      
      return program;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò:', error);
      return null;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò
  function createProgramFromText(textResponse, quizAnswers) {
    console.log('üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò');
    console.log('üîç Quiz answers:', quizAnswers);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–≤–∏–∑–∞
    const workoutsPerWeek = parseInt(quizAnswers.workouts_per_week) || 3;
    const location = quizAnswers.gym_or_home || 'home'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –∫–≤–∏–∑–∞
    const level = quizAnswers.training_level === 'beginner' ? 'beginner' : 'intermediate';
    
    console.log('üèãÔ∏è‚Äç‚ôÄÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:', { workoutsPerWeek, location, level });
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –ò–ò-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    const startDate = new Date();
    const days = [];
    
    for (let i = 0; i < 30; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);
      
      const dayOfWeek = currentDate.getDay();
      let isWorkoutDay = false;
      
      if (workoutsPerWeek === 2) {
        isWorkoutDay = dayOfWeek === 1 || dayOfWeek === 4;
      } else if (workoutsPerWeek === 3) {
        isWorkoutDay = dayOfWeek === 1 || dayOfWeek === 3 || dayOfWeek === 5;
      } else if (workoutsPerWeek === 4) {
        isWorkoutDay = dayOfWeek === 1 || dayOfWeek === 2 || dayOfWeek === 4 || dayOfWeek === 5;
      } else if (workoutsPerWeek === 5) {
        isWorkoutDay = dayOfWeek >= 1 && dayOfWeek <= 5;
      }
      
      const workoutNumber = Math.floor(i / 7) * workoutsPerWeek + (i % 7 < workoutsPerWeek ? (i % 7) + 1 : 1);
      
      const day = {
        date: currentDate.toISOString().slice(0, 10),
        title: currentDate.toLocaleDateString('ru-RU', { weekday: 'long' }),
        dayNumber: i + 1,
        isWorkoutDay,
        workout: isWorkoutDay ? {
          title: `–î–µ–Ω—å ${workoutNumber} | –ò–ò-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (${location === 'gym' ? '–ó–∞–ª' : '–î–æ–º'})`,
          exercises: getAIExercisesForDay(location, workoutNumber, level, textResponse),
          duration: level === 'beginner' ? 30 : 45,
          difficulty: level,
          location: location
        } : null,
        meals: [
          { type: '–ó–∞–≤—Ç—Ä–∞–∫', meal: { name: '–ò–ò-—Ä–µ—Ü–µ–ø—Ç –∑–∞–≤—Ç—Ä–∞–∫–∞ (fallback)', ingredients: [] }, calories: 320, time: '08:00' },
          { type: '–ü–µ—Ä–µ–∫—É—Å', meal: { name: '–ò–ò-—Ä–µ—Ü–µ–ø—Ç –ø–µ—Ä–µ–∫—É—Å–∞ (fallback)', ingredients: [] }, calories: 80, time: '11:00' },
          { type: '–û–±–µ–¥', meal: { name: '–ò–ò-—Ä–µ—Ü–µ–ø—Ç –æ–±–µ–¥–∞ (fallback)', ingredients: [] }, calories: 450, time: '14:00' },
          { type: '–ü–æ–ª–¥–Ω–∏–∫', meal: { name: '–ò–ò-—Ä–µ—Ü–µ–ø—Ç –ø–æ–ª–¥–Ω–∏–∫–∞ (fallback)', ingredients: [] }, calories: 120, time: '17:00' },
          { type: '–£–∂–∏–Ω', meal: { name: '–ò–ò-—Ä–µ—Ü–µ–ø—Ç —É–∂–∏–Ω–∞ (fallback)', ingredients: [] }, calories: 350, time: '19:00' }
        ],
        dailySteps: 0,
        dailyStepsGoal: level === 'beginner' ? 8000 : 10000,
        completedExercises: isWorkoutDay ? new Array(3).fill(false) : [],
        completedMealsArr: new Array(5).fill(false),
        completedWorkout: false,
        completedMeals: false
      };
      
      days.push(day);
    }
    
    return { days, quizAnswers };
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (—Å fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ)
  function getAIExercisesForDay(location, workoutNumber, level, aiText) {
    console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ò–ò-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è:', { location, workoutNumber, level });
    
    // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ò–ò
    const exercises = extractExercisesFromAIText(aiText, location);
    
    if (exercises && exercises.length > 0) {
      return exercises;
    }
    
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–∏ –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    return getExercisesForDay(location, workoutNumber, level);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ò–ò
  function extractExercisesFromAIText(aiText, location) {
    try {
      const exercises = [];
      const lines = aiText.split('\n');
      
      let inWorkoutSection = false;
      
      for (const line of lines) {
        const cleanLine = line.trim();
        
        // –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
        if (cleanLine.toLowerCase().includes('—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞') || 
            cleanLine.toLowerCase().includes('—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è') ||
            cleanLine.toLowerCase().includes('workout')) {
          inWorkoutSection = true;
          continue;
        }
        
        // –ò—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏ –∏–ª–∏ —Ç–∏—Ä–µ)
        if (inWorkoutSection && (cleanLine.match(/^\d+\./) || cleanLine.match(/^[-‚Ä¢]\s/))) {
          const exerciseName = cleanLine.replace(/^\d+\.\s*/, '').replace(/^[-‚Ä¢]\s*/, '').trim();
          
          if (exerciseName.length > 3) {
            exercises.push({
              name: exerciseName,
              reps: '3x12', // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              location: location,
              dayId: getDayIdForLocation(location, exercises.length + 1)
            });
          }
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–µ–∫—Ü–∏—è
        if (exercises.length >= 3 || (inWorkoutSection && cleanLine.includes('–ø–∏—Ç–∞–Ω–∏–µ'))) {
          break;
        }
      }
      
      return exercises;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –ò–ò —Ç–µ–∫—Å—Ç–∞:', error);
      return [];
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è dayId
  function getDayIdForLocation(location, dayNumber) {
    if (location === 'gym') {
      const gymDays = ['day1_glutes_hamstrings', 'day2_shoulders_triceps_abs', 'day3_back_biceps', 'day4_glutes_quads_calves'];
      return gymDays[(dayNumber - 1) % gymDays.length];
    } else {
      const homeDays = ['day1_cardio_circuit', 'day2_functional_circuit', 'day3_tabata', 'day4_hiit', 'day5_cardio_advanced'];
      return homeDays[(dayNumber - 1) % homeDays.length];
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
  function convertAIResponseToProgram(parsedResponse, quizAnswers) {
    console.log('üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ò–ò
      if (parsedResponse && parsedResponse.weeks && parsedResponse.weeks.length > 0) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò —Å –ø–∏—Ç–∞–Ω–∏–µ–º');
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–µ–¥–µ–ª–∏ –≤ –¥–Ω–∏
        const days = [];
        
        parsedResponse.weeks.forEach(week => {
          if (week.days && week.days.length > 0) {
            week.days.forEach(day => {
              const formattedDay = {
                date: day.date || new Date(Date.now() + days.length * 24 * 60 * 60 * 1000).toISOString().slice(0, 10),
                title: new Date(day.date || Date.now() + days.length * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU', { weekday: 'long' }),
                dayNumber: days.length + 1,
                isWorkoutDay: day.isWorkoutDay || false,
                workout: day.workout || null,
                meals: day.meals || [],
                dailySteps: 0,
                dailyStepsGoal: 10000,
                completedExercises: day.workout ? new Array(day.workout.exercises?.length || 3).fill(false) : [],
                completedMealsArr: new Array(5).fill(false),
                completedWorkout: false,
                completedMeals: false
              };
              
              days.push(formattedDay);
            });
          }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ localStorage
        const programId = `ai-${quizAnswers.name || 'user'}-${Date.now()}`;
        const program = {
          programId,
          userId: quizAnswers.name || 'user',
          profile: quizAnswers,
          days: days,
          type: 'monthly-ai-generated',
          createdAt: new Date().toISOString(),
          aiResponse: parsedResponse
        };
        
        localStorage.setItem(`program_${programId}`, JSON.stringify(program));
        
        console.log('‚úÖ –ò–ò –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –ø–∏—Ç–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', programId);
        console.log('üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π:', program.days.length);
        console.log('üèãÔ∏è‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π:', program.days.filter(d => d.isWorkoutDay).length);
        console.log('üçΩÔ∏è –ü—Ä–∏–º–µ—Ä—ã –ø–∏—Ç–∞–Ω–∏—è –æ—Ç –ò–ò:', program.days.slice(0, 2).map(d => d.meals));
        
        return programId;
        
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        throw new Error('–ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ò–ò');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ò–ò –æ—Ç–≤–µ—Ç–∞:', error);
      return null;
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Ç–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É –¥–∏–µ—Ç—ã —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏
  function getBreakfastByDiet(dietType, dayNumber = 1) {
    const breakfasts = {
      vegetarian_eggs: [
        { 
          name: '–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 150, unit: '–≥ (3 —à—Ç)' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã', amount: 80, unit: '–≥' },
            { name: '–®–ø–∏–Ω–∞—Ç', amount: 50, unit: '–≥' },
            { name: '–°—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞', amount: 30, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 5, unit: '–º–ª' }
          ]
        },
        { 
          name: '–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 150, unit: '–≥' },
            { name: '–Ø–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ', amount: 50, unit: '–≥ (1 —à—Ç)' },
            { name: '–Ø–≥–æ–¥—ã —Å–≤–µ–∂–∏–µ', amount: 80, unit: '–≥' },
            { name: '–ú–µ–¥', amount: 15, unit: '–≥ (1 —Å—Ç.–ª.)' },
            { name: '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', amount: 20, unit: '–≥' }
          ]
        },
        { 
          name: '–°—ã—Ä–Ω–∏–∫–∏ —Å —á–µ—Ä–Ω–∏–∫–æ–π', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 9%', amount: 120, unit: '–≥' },
            { name: '–Ø–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ', amount: 50, unit: '–≥ (1 —à—Ç)' },
            { name: '–ú—É–∫–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è', amount: 30, unit: '–≥' },
            { name: '–ß–µ—Ä–Ω–∏–∫–∞', amount: 60, unit: '–≥' },
            { name: '–ö–æ–∫–æ—Å–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–≥' }
          ]
        },
        { 
          name: '–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º –∏ –∑–µ–ª–µ–Ω—å—é', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 150, unit: '–≥ (3 —à—Ç)' },
            { name: '–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π', amount: 40, unit: '–≥' },
            { name: '–£–∫—Ä–æ–ø', amount: 15, unit: '–≥' },
            { name: '–ó–µ–ª–µ–Ω—ã–π –ª—É–∫', amount: 20, unit: '–≥' },
            { name: '–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–≥' }
          ]
        },
        { 
          name: '–¢–≤–æ—Ä–æ–≥ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –æ—Ä–µ—Ö–∞–º–∏', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 150, unit: '–≥' },
            { name: '–ë–∞–Ω–∞–Ω', amount: 100, unit: '–≥ (1 —à—Ç)' },
            { name: '–ú–∏–Ω–¥–∞–ª—å', amount: 20, unit: '–≥' },
            { name: '–ú–µ–¥', amount: 10, unit: '–≥' },
            { name: '–ö–æ—Ä–∏—Ü–∞', amount: 2, unit: '–≥' }
          ]
        }
      ],
      vegetarian_no_eggs: [
        { 
          name: '–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏', 
          ingredients: [
            { name: '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', amount: 60, unit: '–≥' },
            { name: '–ú–æ–ª–æ–∫–æ 2.5%', amount: 200, unit: '–º–ª' },
            { name: '–Ø–≥–æ–¥—ã —Å–≤–µ–∂–∏–µ', amount: 80, unit: '–≥' },
            { name: '–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏', amount: 20, unit: '–≥' },
            { name: '–ú–µ–¥', amount: 10, unit: '–≥' }
          ]
        },
        { 
          name: '–ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å —Ñ—Ä—É–∫—Ç–∞–º–∏', 
          ingredients: [
            { name: '–ô–æ–≥—É—Ä—Ç –≥—Ä–µ—á–µ—Å–∫–∏–π', amount: 150, unit: '–≥' },
            { name: '–ë–∞–Ω–∞–Ω', amount: 100, unit: '–≥ (1 —à—Ç)' },
            { name: '–ú—é—Å–ª–∏', amount: 30, unit: '–≥' },
            { name: '–ú–µ–¥', amount: 15, unit: '–≥' },
            { name: '–ú–∏–Ω–¥–∞–ª—å–Ω—ã–µ –ª–µ–ø–µ—Å—Ç–∫–∏', amount: 15, unit: '–≥' }
          ]
        }
      ],
      vegan: [
        { 
          name: '–û–≤—Å—è–Ω–∫–∞ –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–º –º–æ–ª–æ–∫–µ', 
          ingredients: [
            { name: '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', amount: 60, unit: '–≥' },
            { name: '–ú–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ', amount: 200, unit: '–º–ª' },
            { name: '–ë–∞–Ω–∞–Ω', amount: 100, unit: '–≥' },
            { name: '–°–µ–º–µ–Ω–∞ —á–∏–∞', amount: 15, unit: '–≥' },
            { name: '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø', amount: 10, unit: '–º–ª' }
          ]
        },
        { 
          name: '–¢–æ—Å—Ç —Å –∞–≤–æ–∫–∞–¥–æ –∏ —Å–µ–º–µ–Ω–∞–º–∏', 
          ingredients: [
            { name: '–•–ª–µ–± —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π', amount: 60, unit: '–≥ (2 –∫—É—Å–æ—á–∫–∞)' },
            { name: '–ê–≤–æ–∫–∞–¥–æ', amount: 80, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏', amount: 60, unit: '–≥' },
            { name: '–°–µ–º–µ–Ω–∞ –ª—å–Ω–∞', amount: 10, unit: '–≥' },
            { name: '–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫', amount: 5, unit: '–º–ª' }
          ]
        }
      ],
      meat: [
        { 
          name: '–û–º–ª–µ—Ç —Å –±–µ–∫–æ–Ω–æ–º', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 150, unit: '–≥ (3 —à—Ç)' },
            { name: '–ë–µ–∫–æ–Ω', amount: 50, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã', amount: 70, unit: '–≥' },
            { name: '–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π', amount: 30, unit: '–≥' },
            { name: '–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–≥' }
          ]
        },
        { 
          name: '–¢–≤–æ—Ä–æ–≥ —Å –∫—É—Ä–∏—Ü–µ–π –∏ –∑–µ–ª–µ–Ω—å—é', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 120, unit: '–≥' },
            { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –æ—Ç–≤–∞—Ä–Ω–∞—è', amount: 60, unit: '–≥' },
            { name: '–û–≥—É—Ä–µ—Ü', amount: 80, unit: '–≥' },
            { name: '–ó–µ–ª–µ–Ω—å –º–∏–∫—Å', amount: 15, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 5, unit: '–º–ª' }
          ]
        }
      ],
      fish: [
        { 
          name: '–û–º–ª–µ—Ç —Å –∫—Ä–∞—Å–Ω–æ–π —Ä—ã–±–æ–π', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 150, unit: '–≥ (3 —à—Ç)' },
            { name: '–°–µ–º–≥–∞ —Å–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è', amount: 40, unit: '–≥' },
            { name: '–°–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä', amount: 30, unit: '–≥' },
            { name: '–£–∫—Ä–æ–ø', amount: 10, unit: '–≥' },
            { name: '–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–≥' }
          ]
        },
        { 
          name: '–¢–≤–æ—Ä–æ–≥ —Å —Ç—É–Ω—Ü–æ–º', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 120, unit: '–≥' },
            { name: '–¢—É–Ω–µ—Ü –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–∫—É', amount: 60, unit: '–≥' },
            { name: '–û–≥—É—Ä–µ—Ü', amount: 80, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏', amount: 60, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 5, unit: '–º–ª' }
          ]
        }
      ],
      default: [
        { 
          name: '–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏', 
          ingredients: [
            { name: '–û–≤—Å—è–Ω—ã–µ —Ö–ª–æ–ø—å—è', amount: 50, unit: '–≥' },
            { name: '–ú–æ–ª–æ–∫–æ', amount: 150, unit: '–º–ª' },
            { name: '–Ø–≥–æ–¥—ã', amount: 70, unit: '–≥' },
            { name: '–ú–µ–¥', amount: 10, unit: '–≥' }
          ]
        }
      ]
    };
    
    const options = breakfasts[dietType] || breakfasts.default;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
    const index = (dayNumber - 1) % options.length;
    return options[index];
  }

  function getSnackByDiet(dietType, dayNumber = 1, isEvening = false) {
    const snacks = {
      vegetarian_eggs: [
        { 
          name: '–¢–≤–æ—Ä–æ–≥ —Å –æ—Ä–µ—Ö–∞–º–∏', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 100, unit: '–≥' },
            { name: '–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏', amount: 20, unit: '–≥' },
            { name: '–ú–µ–¥', amount: 10, unit: '–≥' }
          ]
        },
        { 
          name: '–ë–∞–Ω–∞–Ω —Å –π–æ–≥—É—Ä—Ç–æ–º', 
          ingredients: [
            { name: '–ë–∞–Ω–∞–Ω', amount: 100, unit: '–≥ (1 —à—Ç)' },
            { name: '–ô–æ–≥—É—Ä—Ç –≥—Ä–µ—á–µ—Å–∫–∏–π', amount: 80, unit: '–≥' },
            { name: '–ö–æ—Ä–∏—Ü–∞', amount: 2, unit: '–≥' }
          ]
        },
        { 
          name: '–°—ã—Ä —Å —è–±–ª–æ–∫–æ–º', 
          ingredients: [
            { name: '–°—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞', amount: 50, unit: '–≥' },
            { name: '–Ø–±–ª–æ–∫–æ', amount: 100, unit: '–≥ (1 —à—Ç)' }
          ]
        }
      ],
      vegetarian_no_eggs: [
        { 
          name: '–Ø–±–ª–æ–∫–æ —Å –º–∏–Ω–¥–∞–ª–µ–º', 
          ingredients: [
            { name: '–Ø–±–ª–æ–∫–æ', amount: 150, unit: '–≥ (1 —à—Ç)' },
            { name: '–ú–∏–Ω–¥–∞–ª—å', amount: 20, unit: '–≥' }
          ]
        }
      ],
      vegan: [
        { 
          name: '–ë–∞–Ω–∞–Ω —Å –∞—Ä–∞—Ö–∏—Å–æ–≤–æ–π –ø–∞—Å—Ç–æ–π', 
          ingredients: [
            { name: '–ë–∞–Ω–∞–Ω', amount: 120, unit: '–≥' },
            { name: '–ê—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞', amount: 15, unit: '–≥' }
          ]
        }
      ],
      meat: [
        { 
          name: '–ö—É—Ä–∏–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ —Å –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –æ—Ç–≤–∞—Ä–Ω–∞—è', amount: 80, unit: '–≥' },
            { name: '–û–≥—É—Ä–µ—Ü', amount: 50, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏', amount: 50, unit: '–≥' }
          ]
        }
      ],
      fish: [
        { 
          name: '–ö—Ä–µ–∫–µ—Ä—ã —Å –∫—Ä–∞—Å–Ω–æ–π —Ä—ã–±–æ–π', 
          ingredients: [
            { name: '–ö—Ä–µ–∫–µ—Ä—ã —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–µ', amount: 30, unit: '–≥' },
            { name: '–°–µ–º–≥–∞ —Å–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞—è', amount: 40, unit: '–≥' },
            { name: '–°–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä', amount: 20, unit: '–≥' }
          ]
        }
      ],
      default: [
        { 
          name: '–ô–æ–≥—É—Ä—Ç', 
          ingredients: [
            { name: '–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π', amount: 125, unit: '–≥' }
          ]
        }
      ]
    };
    
    const options = snacks[dietType] || snacks.default;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –∏ —Ç–∏–ø –ø–µ—Ä–µ–∫—É—Å–∞ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    const seed = isEvening ? dayNumber + 100 : dayNumber;
    const index = (seed - 1) % options.length;
    return options[index];
  }

  function getLunchByDiet(dietType, dayNumber = 1) {
    const lunches = {
      vegetarian_eggs: [
        { 
          name: '–ö–∏–Ω–æ–∞ —Å –æ–≤–æ—â–∞–º–∏ –∏ —Å—ã—Ä–æ–º', 
          ingredients: [
            { name: '–ö–∏–Ω–æ–∞', amount: 80, unit: '–≥ (—Å—É—Ö–∞—è)' },
            { name: '–ë—Ä–æ–∫–∫–æ–ª–∏', amount: 100, unit: '–≥' },
            { name: '–°—ã—Ä —Ñ–µ—Ç–∞', amount: 50, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã', amount: 80, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        },
        { 
          name: '–û–º–ª–µ—Ç —Å —Å—ã—Ä–æ–º –∏ –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 150, unit: '–≥ (3 —à—Ç)' },
            { name: '–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π', amount: 40, unit: '–≥' },
            { name: '–ö–∞–±–∞—á–æ–∫', amount: 100, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã', amount: 80, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        },
        { 
          name: '–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ —Å –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 150, unit: '–≥' },
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 100, unit: '–≥ (2 —à—Ç)' },
            { name: '–ú–æ—Ä–∫–æ–≤—å', amount: 80, unit: '–≥' },
            { name: '–¶—É–∫–∏–Ω–∏', amount: 100, unit: '–≥' },
            { name: '–°—ã—Ä —Ç–≤–µ—Ä–¥—ã–π', amount: 30, unit: '–≥' }
          ]
        },
        { 
          name: '–§—Ä–∏—Ç—Ç–∞—Ç–∞ —Å —à–ø–∏–Ω–∞—Ç–æ–º', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 150, unit: '–≥ (3 —à—Ç)' },
            { name: '–®–ø–∏–Ω–∞—Ç', amount: 120, unit: '–≥' },
            { name: '–°—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞', amount: 50, unit: '–≥' },
            { name: '–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π', amount: 40, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        },
        { 
          name: '–†–∏–∑–æ—Ç—Ç–æ —Å –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–†–∏—Å –∞—Ä–±–æ—Ä–∏–æ', amount: 60, unit: '–≥ (—Å—É—Ö–æ–π)' },
            { name: '–°–ø–∞—Ä–∂–∞', amount: 100, unit: '–≥' },
            { name: '–°—ã—Ä –ø–∞—Ä–º–µ–∑–∞–Ω', amount: 40, unit: '–≥' },
            { name: '–ì—Ä–∏–±—ã —à–∞–º–ø–∏–Ω—å–æ–Ω—ã', amount: 80, unit: '–≥' },
            { name: '–û–≤–æ—â–Ω–æ–π –±—É–ª—å–æ–Ω', amount: 200, unit: '–º–ª' }
          ]
        }
      ],
      vegetarian_no_eggs: [
        { 
          name: '–û–≤–æ—â–Ω–æ–µ —Ä–∞–≥—É —Å –±–æ–±–æ–≤—ã–º–∏', 
          ingredients: [
            { name: '–ù—É—Ç –æ—Ç–≤–∞—Ä–Ω–æ–π', amount: 120, unit: '–≥' },
            { name: '–ë–∞–∫–ª–∞–∂–∞–Ω', amount: 100, unit: '–≥' },
            { name: '–ö–∞–±–∞—á–æ–∫', amount: 100, unit: '–≥' },
            { name: '–ü–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π', amount: 80, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 15, unit: '–º–ª' }
          ]
        }
      ],
      vegan: [
        { 
          name: '–°–∞–ª–∞—Ç —Å –Ω—É—Ç–æ–º –∏ —Ç–∞—Ö–∏–Ω–∏', 
          ingredients: [
            { name: '–ù—É—Ç –æ—Ç–≤–∞—Ä–Ω–æ–π', amount: 150, unit: '–≥' },
            { name: '–õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞', amount: 80, unit: '–≥' },
            { name: '–û–≥—É—Ä–µ—Ü', amount: 100, unit: '–≥' },
            { name: '–¢–∞—Ö–∏–Ω–∏', amount: 20, unit: '–≥' },
            { name: '–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫', amount: 10, unit: '–º–ª' }
          ]
        }
      ],
      meat: [
        { 
          name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞', amount: 150, unit: '–≥' },
            { name: '–†–∏—Å –±—É—Ä—ã–π', amount: 60, unit: '–≥ (—Å—É—Ö–æ–π)' },
            { name: '–ë—Ä–æ–∫–∫–æ–ª–∏', amount: 100, unit: '–≥' },
            { name: '–ú–æ—Ä–∫–æ–≤—å', amount: 80, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        },
        { 
          name: '–ì–æ–≤—è–¥–∏–Ω–∞ —Å –≥—Ä–µ—á–∫–æ–π', 
          ingredients: [
            { name: '–ì–æ–≤—è–¥–∏–Ω–∞ –ø–æ—Å—Ç–Ω–∞—è', amount: 120, unit: '–≥' },
            { name: '–ì—Ä–µ—á–∫–∞', amount: 60, unit: '–≥ (—Å—É—Ö–∞—è)' },
            { name: '–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π', amount: 50, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã', amount: 100, unit: '–≥' },
            { name: '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        }
      ],
      fish: [
        { 
          name: '–°–µ–º–≥–∞ —Å –∫–∏–Ω–æ–∞ –∏ –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–°–µ–º–≥–∞ —Å–≤–µ–∂–∞—è', amount: 150, unit: '–≥' },
            { name: '–ö–∏–Ω–æ–∞', amount: 60, unit: '–≥ (—Å—É—Ö–∞—è)' },
            { name: '–°–ø–∞—Ä–∂–∞', amount: 100, unit: '–≥' },
            { name: '–õ–∏–º–æ–Ω', amount: 30, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        },
        { 
          name: '–¢—Ä–µ—Å–∫–∞ —Å —Ä–∏—Å–æ–º', 
          ingredients: [
            { name: '–¢—Ä–µ—Å–∫–∞ —Ñ–∏–ª–µ', amount: 150, unit: '–≥' },
            { name: '–†–∏—Å –¥–∏–∫–∏–π', amount: 60, unit: '–≥ (—Å—É—Ö–æ–π)' },
            { name: '–¶–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞', amount: 120, unit: '–≥' },
            { name: '–ó–µ–ª–µ–Ω—å', amount: 15, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        }
      ],
      default: [
        { 
          name: '–ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞', amount: 120, unit: '–≥' },
            { name: '–†–∏—Å –±—É—Ä—ã–π', amount: 60, unit: '–≥ (—Å—É—Ö–æ–π)' },
            { name: '–û–≤–æ—â–∏ –Ω–∞ –ø–∞—Ä—É', amount: 150, unit: '–≥' }
          ]
        }
      ]
    };
    
    const options = lunches[dietType] || lunches.default;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ–±–µ–¥–∞
    const index = (dayNumber - 1) % options.length;
    return options[index];
  }

  function getDinnerByDiet(dietType, dayNumber = 1) {
    const dinners = {
      vegetarian_eggs: [
        { 
          name: '–û–º–ª–µ—Ç —Å –∑–µ–ª–µ–Ω—å—é', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 100, unit: '–≥ (2 —à—Ç)' },
            { name: '–®–ø–∏–Ω–∞—Ç', amount: 60, unit: '–≥' },
            { name: '–£–∫—Ä–æ–ø', amount: 10, unit: '–≥' },
            { name: '–°—ã—Ä —Ç–≤–æ—Ä–æ–∂–Ω—ã–π', amount: 30, unit: '–≥' }
          ]
        },
        { 
          name: '–¢–≤–æ—Ä–æ–≥ —Å —è–π—Ü–æ–º –∏ –æ–≥—É—Ä—Ü–æ–º', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 120, unit: '–≥' },
            { name: '–Ø–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ –≤–∞—Ä–µ–Ω–æ–µ', amount: 50, unit: '–≥ (1 —à—Ç)' },
            { name: '–û–≥—É—Ä–µ—Ü', amount: 100, unit: '–≥' },
            { name: '–ó–µ–ª–µ–Ω—å', amount: 15, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 5, unit: '–º–ª' }
          ]
        },
        { 
          name: '–Ø–∏—á–Ω–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–Ø–π—Ü–∞ –∫—É—Ä–∏–Ω—ã–µ', amount: 100, unit: '–≥ (2 —à—Ç)' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã', amount: 80, unit: '–≥' },
            { name: '–ü–µ—Ä–µ—Ü –±–æ–ª–≥–∞—Ä—Å–∫–∏–π', amount: 60, unit: '–≥' },
            { name: '–õ—É–∫ –∑–µ–ª–µ–Ω—ã–π', amount: 20, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 8, unit: '–º–ª' }
          ]
        },
        { 
          name: '–°—ã—Ä–Ω–∏–∫–∏ –∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 9%', amount: 150, unit: '–≥' },
            { name: '–Ø–π—Ü–æ –∫—É—Ä–∏–Ω–æ–µ', amount: 50, unit: '–≥ (1 —à—Ç)' },
            { name: '–ú—É–∫–∞ —Ä–∏—Å–æ–≤–∞—è', amount: 20, unit: '–≥' },
            { name: '–Ø–≥–æ–¥—ã', amount: 50, unit: '–≥' }
          ]
        },
        { 
          name: '–°–∞–ª–∞—Ç —Å –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ –ø–æ–º–∏–¥–æ—Ä–∞–º–∏', 
          ingredients: [
            { name: '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞', amount: 80, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã', amount: 120, unit: '–≥' },
            { name: '–õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞', amount: 60, unit: '–≥' },
            { name: '–ë–∞–∑–∏–ª–∏–∫', amount: 10, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        }
      ],
      vegetarian_no_eggs: [
        { 
          name: '–¢–≤–æ—Ä–æ–≥ —Å –∑–µ–ª–µ–Ω—å—é', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥ 5%', amount: 150, unit: '–≥' },
            { name: '–û–≥—É—Ä–µ—Ü', amount: 80, unit: '–≥' },
            { name: '–ó–µ–ª–µ–Ω—å –º–∏–∫—Å', amount: 20, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 5, unit: '–º–ª' }
          ]
        }
      ],
      vegan: [
        { 
          name: '–û–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç —Å —Å–µ–º–µ–Ω–∞–º–∏', 
          ingredients: [
            { name: '–û–≥—É—Ä–µ—Ü', amount: 100, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä', amount: 100, unit: '–≥' },
            { name: '–°–µ–º–µ–Ω–∞ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫–∞', amount: 20, unit: '–≥' },
            { name: '–õ–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫', amount: 10, unit: '–º–ª' }
          ]
        }
      ],
      meat: [
        { 
          name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Å–∞–ª–∞—Ç–æ–º', 
          ingredients: [
            { name: '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞', amount: 120, unit: '–≥' },
            { name: '–õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞', amount: 80, unit: '–≥' },
            { name: '–û–≥—É—Ä–µ—Ü', amount: 60, unit: '–≥' },
            { name: '–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏', amount: 60, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 10, unit: '–º–ª' }
          ]
        }
      ],
      fish: [
        { 
          name: '–¢—Ä–µ—Å–∫–∞ –Ω–∞ –ø–∞—Ä—É —Å –æ–≤–æ—â–∞–º–∏', 
          ingredients: [
            { name: '–¢—Ä–µ—Å–∫–∞ —Ñ–∏–ª–µ', amount: 120, unit: '–≥' },
            { name: '–ë—Ä–æ–∫–∫–æ–ª–∏', amount: 100, unit: '–≥' },
            { name: '–¶—É–∫–∏–Ω–∏', amount: 80, unit: '–≥' },
            { name: '–õ–∏–º–æ–Ω', amount: 20, unit: '–≥' },
            { name: '–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', amount: 5, unit: '–º–ª' }
          ]
        }
      ],
      default: [
        { 
          name: '–¢–≤–æ—Ä–æ–≥ —Å –∑–µ–ª–µ–Ω—å—é', 
          ingredients: [
            { name: '–¢–≤–æ—Ä–æ–≥', amount: 120, unit: '–≥' },
            { name: '–ó–µ–ª–µ–Ω—å', amount: 15, unit: '–≥' }
          ]
        }
      ]
    };
    
    const options = dinners[dietType] || dinners.default;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É–∂–∏–Ω–∞
    const index = (dayNumber - 1) % options.length;
    return options[index];
  }

  return (
    <div style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh', width: '100vw', background: '#fff' }}>
      {showVideoTest ? (
        <div>
          <VideoTest />
        </div>
      ) : showAITest ? (
        <div>
          <AITestPage />
        </div>
      ) : null}
      
      {/* –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ TestWeek, –Ω–æ –ù–ï –Ω–∞ TodayBlock –∏ –ù–ï –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã */}
      {!showSplash && showTestWeek && !isPaymentShown && (
        <div
          onClick={() => setShowProfile(true)}
          style={{
            position: 'fixed',
            top: 20,
            right: 20,
            width: 60,
            height: 60,
            borderRadius: '50%',
            background: 'linear-gradient(135deg, #0088cc 0%, #005699 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: 'pointer',
            zIndex: 1001, // –í—ã—à–µ —á–µ–º —É –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞
            boxShadow: '0 4px 20px rgba(0, 136, 204, 0.4)',
            transition: 'all 0.3s ease',
            border: '2px solid rgba(255, 255, 255, 0.2)',
            overflow: 'hidden'
          }}
          onMouseEnter={(e) => {
            e.target.style.transform = 'scale(1.1)';
            e.target.style.boxShadow = '0 6px 16px rgba(0, 136, 204, 0.4)';
          }}
          onMouseLeave={(e) => {
            e.target.style.transform = 'scale(1)';
            e.target.style.boxShadow = '0 4px 20px rgba(0, 136, 204, 0.4)';
          }}
        >
          {/* –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏–ª–∏ –∏–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */}
          {userAvatar ? (
            <img 
              src={userAvatar}
              alt="User Avatar"
              style={{
                width: '100%',
                height: '100%',
                objectFit: 'cover',
                borderRadius: '50%'
              }}
              onError={() => {
                // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, —É–±–∏—Ä–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
                setUserAvatar(null);
              }}
            />
          ) : (
            <span 
              style={{ 
                fontSize: 24, 
                color: 'white', 
                fontWeight: 'bold'
              }}
            >
              üë§
            </span>
          )}
        </div>
      )}
      
      {showSplash ? (
        <div>
          <SplashScreen />
          <button 
            onClick={() => setShowVideoTest(true)}
            style={{ 
              position: 'fixed', 
              bottom: '20px', 
              left: '20px', 
              zIndex: 1000, 
              padding: '10px 15px', 
              backgroundColor: '#007bff', 
              color: 'white', 
              border: 'none', 
              borderRadius: '5px',
              fontSize: '14px'
            }}
          >
            üé• –¢–µ—Å—Ç –≤–∏–¥–µ–æ
          </button>
          <button 
            onClick={() => setShowAITest(true)}
            style={{ 
              position: 'fixed', 
              bottom: '80px', 
              left: '20px', 
              zIndex: 1000, 
              padding: '10px 15px', 
              backgroundColor: '#28a745', 
              color: 'white', 
              border: 'none', 
              borderRadius: '5px',
              fontSize: '14px'
            }}
          >
            ü§ñ –¢–µ—Å—Ç –ò–ò
          </button>
          <button 
            onClick={() => window.open('/connection-test.html', '_blank')}
            style={{ 
              position: 'fixed', 
              bottom: '140px', 
              left: '20px', 
              zIndex: 1000, 
              padding: '10px 15px', 
              backgroundColor: '#ffc107', 
              color: 'black', 
              border: 'none', 
              borderRadius: '5px',
              fontSize: '14px'
            }}
          >
            üîó –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          </button>
          
          {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö */}
          <button 
            onClick={() => {
              console.log('=== TELEGRAM DEBUG INFO ===');
              console.log('window.Telegram:', window.Telegram);
              console.log('WebApp:', window.Telegram?.WebApp);
              console.log('initDataUnsafe:', window.Telegram?.WebApp?.initDataUnsafe);
              console.log('user:', window.Telegram?.WebApp?.initDataUnsafe?.user);
              console.log('userAvatar state:', userAvatar);
              alert('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Telegram');
            }}
            style={{ 
              position: 'fixed', 
              bottom: '200px', 
              left: '20px', 
              zIndex: 1000, 
              padding: '10px 15px', 
              backgroundColor: '#6f42c1', 
              color: 'white', 
              border: 'none', 
              borderRadius: '5px',
              fontSize: '14px'
            }}
          >
            üêõ Debug Telegram
          </button>
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ */}
          <button 
            onClick={() => {
              const testAvatar = 'https://avatars.githubusercontent.com/u/1?v=4';
              setUserAvatar(testAvatar);
              console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞:', testAvatar);
            }}
            style={{ 
              position: 'fixed', 
              bottom: '260px', 
              left: '20px', 
              zIndex: 1000, 
              padding: '10px 15px', 
              backgroundColor: '#e83e8c', 
              color: 'white', 
              border: 'none', 
              borderRadius: '5px',
              fontSize: '14px'
            }}
          >
            üñºÔ∏è –¢–µ—Å—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
          </button>
          
          {/* –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ */}
          {process.env.NODE_ENV === 'development' && (
            <>
              {/* –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
              <button 
                onClick={() => {
                  if (isPremium) {
                    setIsPremium(false);
                    setUnlocked(false);
                    localStorage.removeItem('dianafit_premium');
                    alert('‚ùå –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
                  } else {
                    activatePremium();
                    alert('üéâ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò-—á–∞—Ç.');
                  }
                }}
                style={{ 
                  position: 'fixed', 
                  bottom: '320px', 
                  left: '20px', 
                  zIndex: 1000, 
                  padding: '10px 15px', 
                  backgroundColor: isPremium ? '#4CAF50' : '#FFD700', 
                  color: isPremium ? 'white' : 'black', 
                  border: 'none', 
                  borderRadius: '5px',
                  fontSize: '14px',
                  fontWeight: 'bold'
                }}
              >
                {isPremium ? '‚úÖ –ü—Ä–µ–º–∏—É–º –í–ö–õ' : 'üíé –ü—Ä–µ–º–∏—É–º –í–´–ö–õ'}
              </button>
            </>
          )}
        </div>
      ) : showProfile ? (
        <ProfilePage
          onClose={() => setShowProfile(false)}
          unlocked={unlocked}
          isPremium={isPremium}
          activatePremium={activatePremium}
          answers={answers}
          onEditQuiz={() => { setShowProfile(false); setShowToday(false); setShowTestWeek(false); setShowTodayBlock(false); }}
          onRestart={() => { 
            setAnswers(null); 
            setProgramId(null); 
            setShowProfile(false); 
            setShowToday(false); 
            setShowTestWeek(false); 
            setShowTodayBlock(false); 
            setUnlocked(false); 
            setIsPremium(false); 
            localStorage.removeItem('dianafit_premium');
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ localStorage
            Object.keys(localStorage).forEach(key => {
              if (key.startsWith('program_')) {
                localStorage.removeItem(key);
              }
            });
          }}
        />
      ) : showTestWeek ? (
        <TestWeek 
          isPremium={isPremium}
          activatePremium={activatePremium}
          setIsPaymentShown={setIsPaymentShown}
          programId={programId}
          onStartProgram={() => {
            setShowTestWeek(false);
            setShowToday(true);
          }}
          onShowTodayBlock={() => {
            setShowTestWeek(false);
            setShowTodayBlock(true);
          }}
        />
      ) : showTodayBlock ? (
        <TodayBlock 
          day={todayDay} 
          answers={answers}
          programId={programId}
          isPremium={isPremium}
          activatePremium={activatePremium}
          setIsPaymentShown={setIsPaymentShown}
          onBackToWeek={() => {
            setShowTodayBlock(false);
            setShowTestWeek(true);
          }} 
        />
      ) : (answers && programId && todayDay && !showToday) ? (
        <TestWeek programId={programId} unlocked={unlocked} setUnlocked={setUnlocked} />
      ) : showToday && answers && programId ? (
        <TestWeek programId={programId} unlocked={unlocked} setUnlocked={setUnlocked} />
      ) : (
        <StoryQuiz onFinish={handleQuizFinish} />
      )}
    </div>
  );
}

export default App;
