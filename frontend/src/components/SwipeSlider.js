import React, { useState, useRef, useEffect } from 'react';

const SwipeSlider = ({ 
  isCompleted, 
  onStatusChange, 
  leftText = "–í—ã–ø–æ–ª–Ω–∏–ª", 
  rightText = "–ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª",
  leftIcon = "‚úÖ",
  rightIcon = "‚ùå",
  disabled = false 
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const [position, setPosition] = useState(() => {
    console.log('üéõÔ∏è SwipeSlider –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º position = 50 (—Ü–µ–Ω—Ç—Ä)');
    return 50;
  }); // –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ü–µ–Ω—Ç—Ä–∞
  const [startX, setStartX] = useState(0);
  const [startPosition, setStartPosition] = useState(50);
  const sliderRef = useRef(null);
  const knobRef = useRef(null);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω
  useEffect(() => {
    console.log('üéõÔ∏è SwipeSlider useEffect: isCompleted =', isCompleted, 'type:', typeof isCompleted, 'isCompleted === null:', isCompleted === null, 'isCompleted === undefined:', isCompleted === undefined);
    
    if (isCompleted === true) {
      console.log('üéõÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ª–µ–≤–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)');
      setPosition(15); // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
    } else if (isCompleted === false) {
      console.log('üéõÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø—Ä–∞–≤–∞ (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)');
      setPosition(85); // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
    } else {
      console.log('üéõÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–Ω—Ç—Ä–µ (–Ω–µ –≤—ã–±—Ä–∞–Ω–æ) - isCompleted –Ω–µ true –∏ –Ω–µ false');
      setPosition(50); // –¶–µ–Ω—Ç—Ä (–Ω–µ –≤—ã–±—Ä–∞–Ω–æ) - –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ –¥–ª—è null, undefined
    }
  }, [isCompleted]);

  const handleStart = (clientX) => {
    if (disabled) return;
    setIsDragging(true);
    setStartX(clientX);
    setStartPosition(position);
  };

  const handleMove = (clientX) => {
    if (!isDragging || !sliderRef.current || disabled) return;

    const rect = sliderRef.current.getBoundingClientRect();
    const sliderWidth = rect.width;
    const deltaX = clientX - startX;
    const deltaPercent = (deltaX / sliderWidth) * 100;
    
    let newPosition = startPosition + deltaPercent;
    newPosition = Math.max(10, Math.min(90, newPosition)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 10% –¥–æ 90%
    
    setPosition(newPosition);
  };

  const handleEnd = () => {
    if (!isDragging || disabled) return;
    setIsDragging(false);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –∏ —Å—Ç–∞—Ç—É—Å
    if (position < 30) {
      // –õ–µ–≤–∞—è –∑–æ–Ω–∞ - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      setPosition(15);
      if (isCompleted !== true) {
        onStatusChange(true);
      }
    } else if (position > 70) {
      // –ü—Ä–∞–≤–∞—è –∑–æ–Ω–∞ - –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      setPosition(85);
      if (isCompleted !== false) {
        onStatusChange(false);
      }
    } else {
      // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ —Ü–µ–Ω—Ç—Ä—É
      if (isCompleted === true) {
        setPosition(15);
      } else if (isCompleted === false) {
        setPosition(85);
      } else {
        setPosition(50); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª–æ—Å–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
  const handleTrackClick = (e) => {
    if (disabled || isDragging) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –ø–æ —Ä—É—á–∫–µ
    if (e.target === knobRef.current || knobRef.current?.contains(e.target)) {
      return;
    }

    const rect = sliderRef.current.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const clickPercent = (clickX / rect.width) * 100;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –∑–æ–Ω—É –∫–ª–∏–∫–Ω—É–ª–∏
    if (clickPercent < 50) {
      // –ö–ª–∏–∫ –≤ –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      setPosition(15);
      if (isCompleted !== true) {
        onStatusChange(true);
      }
    } else {
      // –ö–ª–∏–∫ –≤ –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É - –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      setPosition(85);
      if (isCompleted !== false) {
        onStatusChange(false);
      }
    }
  };

  // Mouse events
  const handleMouseDown = (e) => {
    e.preventDefault();
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–ª–∏–∫–∞ –ø–æ–ª–æ—Å—ã
    handleStart(e.clientX);
  };

  const handleMouseMove = (e) => {
    handleMove(e.clientX);
  };

  const handleMouseUp = () => {
    handleEnd();
  };

  // Touch events
  const handleTouchStart = (e) => {
    e.preventDefault();
    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–ª–∏–∫–∞ –ø–æ–ª–æ—Å—ã
    handleStart(e.touches[0].clientX);
  };

  const handleTouchMove = (e) => {
    e.preventDefault();
    handleMove(e.touches[0].clientX);
  };

  const handleTouchEnd = (e) => {
    e.preventDefault();
    handleEnd();
  };

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      document.addEventListener('touchmove', handleTouchMove, { passive: false });
      document.addEventListener('touchend', handleTouchEnd, { passive: false });
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('touchmove', handleTouchMove);
      document.removeEventListener('touchend', handleTouchEnd);
    };
  }, [isDragging, position, startX, startPosition]);

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞
  const getBackgroundGradient = () => {
    return '#f1f5f9'; // –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ–π –ø–æ–ª–æ—Å—ã
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ä—É—á–∫–∏ - —Ç–µ–ø–µ—Ä—å —Ü–≤–µ—Ç –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
  const getKnobColor = () => {
    if (position < 30) return '#22c55e'; // –ó–µ–ª–µ–Ω—ã–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    if (position > 70) return '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    return '#94a3b8'; // –°–µ—Ä—ã–π –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ç–µ–Ω—å —Ä—É—á–∫–∏
  const getKnobStyle = () => {
    const baseSize = 32; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Ä—É—á–∫–∏ –Ω–∞ 4px (~2–º–º)
    const scale = isDragging ? 1.1 : 1;
    const size = baseSize * scale;
    
    return {
      width: size,
      height: size,
      backgroundColor: getKnobColor(),
      boxShadow: isDragging 
        ? '0 8px 25px rgba(0, 0, 0, 0.15), 0 4px 10px rgba(0, 0, 0, 0.1)' 
        : '0 4px 15px rgba(0, 0, 0, 0.1), 0 2px 5px rgba(0, 0, 0, 0.05)',
      transition: isDragging ? 'none' : 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
      scale: scale // –ò—Å–ø–æ–ª—å–∑—É–µ–º scale –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    };
  };

  return (
    <div style={{
      position: 'relative',
      width: '100%',
      height: 70, // –£–≤–µ–ª–∏—á–∏–ª–∏ –æ–±—â—É—é –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∏ –∏ –±–æ–ª—å—à–∏–π –ø–æ–ª–∑—É–Ω–æ–∫
      marginTop: 12,
      userSelect: 'none',
      opacity: disabled ? 0.6 : 1
    }}>
      {/* –ü–æ–¥–ø–∏—Å–∏ –≤—ã—à–µ –ø–æ–ª–æ—Å—ã - —Ç–æ–Ω–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        height: 20,
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingLeft: 8,
        paddingRight: 8
      }}>
        {/* –õ–µ–≤–∞—è –ø–æ–¥–ø–∏—Å—å */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: 4,
          fontSize: 12,
          fontWeight: 300, // –¢–æ–Ω–∫–∏–π —à—Ä–∏—Ñ—Ç
          color: '#64748b',
          opacity: 0.8
        }}>
          <span style={{ fontSize: 12 }}>{leftIcon}</span>
          <span>{leftText}</span>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–æ–¥–ø–∏—Å—å */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: 4,
          fontSize: 12,
          fontWeight: 300, // –¢–æ–Ω–∫–∏–π —à—Ä–∏—Ñ—Ç
          color: '#64748b',
          opacity: 0.8
        }}>
          <span>{rightText}</span>
          <span style={{ fontSize: 12 }}>{rightIcon}</span>
        </div>
      </div>

      {/* –§–æ–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ - –±–æ–ª–µ–µ —É–∑–∫–∞—è —Å–µ—Ä–∞—è –ø–æ–ª–æ—Å–∞ */}
      <div
        ref={sliderRef}
        onClick={handleTrackClick}
        style={{
          position: 'absolute',
          top: 30, // –°–¥–≤–∏–Ω—É–ª–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã
          left: 0,
          right: 0,
          height: 24, // –°–¥–µ–ª–∞–ª–∏ –ø–æ–ª–æ—Å—É —É–∂–µ (–±—ã–ª–æ 50)
          background: getBackgroundGradient(),
          borderRadius: 12, // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏–ª–∏
          border: '1px solid #e2e8f0', // –¢–æ–Ω—å—à–µ —Ä–∞–º–∫–∞
          cursor: disabled ? 'not-allowed' : 'pointer',
          overflow: 'hidden'
        }}
      >
        {/* –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –ª–∏–Ω–∏–∏ –±–µ–∑ —Ü–≤–µ—Ç–æ–≤ */}
        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è - 50% */}
        <div style={{
          position: 'absolute',
          left: '50%',
          top: '20%',
          bottom: '20%',
          width: '2px',
          background: '#94a3b8',
          borderRadius: '1px',
          transform: 'translateX(-50%)',
          opacity: 0.8
        }} />

        {/* –ù–µ–≤–∏–¥–∏–º—ã–µ –∑–æ–Ω—ã –¥–ª—è –∫–ª–∏–∫–æ–≤ - –¥–ª—è –ª—É—á—à–µ–≥–æ UX */}
        {/* –õ–µ–≤–∞—è –∑–æ–Ω–∞ –∫–ª–∏–∫–∞ */}
        <div style={{
          position: 'absolute',
          left: 0,
          top: 0,
          width: '50%',
          height: '100%',
          cursor: disabled ? 'not-allowed' : 'pointer',
          opacity: 0, // –ù–µ–≤–∏–¥–∏–º–∞—è
          zIndex: 5
        }} />
        
        {/* –ü—Ä–∞–≤–∞—è –∑–æ–Ω–∞ –∫–ª–∏–∫–∞ */}
        <div style={{
          position: 'absolute',
          right: 0,
          top: 0,
          width: '50%',
          height: '100%',
          cursor: disabled ? 'not-allowed' : 'pointer',
          opacity: 0, // –ù–µ–≤–∏–¥–∏–º–∞—è
          zIndex: 5
        }} />
      </div>

      {/* –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–∞—è —Ä—É—á–∫–∞ - –≤—ã–Ω–µ—Å–µ–Ω–∞ –ø–æ–≤–µ—Ä—Ö –ø–æ–ª–æ—Å—ã */}
      <div
        ref={knobRef}
        onMouseDown={handleMouseDown}
        onTouchStart={handleTouchStart}
        style={{
          position: 'absolute',
          top: 42, // –í—ã—Ä–æ–≤–Ω—è–ª–∏ —Ç–æ—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ–ª–æ—Å—ã (30 + 24/2 = 42)
          left: `${position}%`,
          borderRadius: '50%',
          cursor: disabled ? 'not-allowed' : (isDragging ? 'grabbing' : 'grab'),
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 14, // –ß—É—Ç—å –º–µ–Ω—å—à–µ —à—Ä–∏—Ñ—Ç –≤ —Ä—É—á–∫–µ
          fontWeight: 600,
          color: '#ffffff', // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ü–≤–µ—Ç–Ω–æ–º —Ñ–æ–Ω–µ
          backgroundColor: getKnobColor(), // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ä—É—á–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è
          transform: 'translate(-50%, -50%)', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª–∑—É–Ω–æ–∫
          zIndex: 20, // –í—ã—à–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          ...getKnobStyle()
        }}
      >
        {position < 35 ? leftIcon : position > 65 ? rightIcon : '‚óã'}
      </div>
    </div>
  );
};

export default SwipeSlider;
