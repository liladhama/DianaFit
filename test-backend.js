const fetch = require('node-fetch');

const API_URL = 'http://localhost:3001';

async function testBackend() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DianaFit Backend...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    const statusResponse = await fetch(`${API_URL}/`);
    const statusText = await statusResponse.text();
    console.log(`   ‚úÖ –û—Ç–≤–µ—Ç: ${statusText}\n`);

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–≤–∏–∑–∞
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–≤–∏–∑–∞...');
    const quizResponse = await fetch(`${API_URL}/api/quiz-config`);
    if (quizResponse.ok) {
      const quizData = await quizResponse.json();
      console.log(`   ‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: ${quizData.slides?.length || 0} —Å–ª–∞–π–¥–æ–≤\n`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${quizResponse.status}\n`);
    }

    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç —á–∞—Ç–∞ —Å –î–∏–∞–Ω–æ–π
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º –î–∏–∞–Ω–æ–π...');
    const chatResponse = await fetch(`${API_URL}/api/chat-diana`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        context: '–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞'
      })
    });

    if (chatResponse.ok) {
      const chatData = await chatResponse.json();
      console.log(`   ‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –î–∏–∞–Ω—ã: ${chatData.response?.substring(0, 100)}...\n`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: ${chatResponse.status}\n`);
    }

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞–Ω–∞
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞–Ω–∞...');
    const planResponse = await fetch(`${API_URL}/api/calculate-plan`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        age: 25,
        weight: 65,
        height: 170,
        goal: '–ø–æ—Ö—É–¥–µ—Ç—å'
      })
    });

    if (planResponse.ok) {
      const planData = await planResponse.json();
      console.log(`   ‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: ${planData.plan?.substring(0, 100)}...\n`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: ${planResponse.status}\n`);
    }

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω: npm start –≤ –ø–∞–ø–∫–µ backend');
  }
}

testBackend();
